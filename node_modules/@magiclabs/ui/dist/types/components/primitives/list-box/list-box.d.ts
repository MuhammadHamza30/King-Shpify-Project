import type { AriaListBoxOptions } from '@react-aria/listbox';
import React from 'react';
import { ListProps, ListState } from 'react-stately';
interface ListBoxContext<T extends object = object> {
    state?: ListState<T>;
    ref?: React.MutableRefObject<HTMLUListElement | null>;
}
export declare const ListBoxContext: React.Context<ListBoxContext<object> | null>;
interface ListBoxProps<T extends object> extends ListProps<T>, AriaListBoxOptions<T> {
    minHeight?: React.CSSProperties['maxHeight'];
    maxHeight?: React.CSSProperties['maxHeight'];
}
declare function ListBoxRender<T extends object>(props: ListBoxProps<T>): React.JSX.Element;
export declare function useOption(): {
    isFocused: boolean;
    isSelected: boolean;
    isPressed: boolean;
    isDisabled: boolean;
};
export declare const ListBox: typeof ListBoxRender & {
    propTypes?: React.WeakValidationMap<ListBoxProps<object>> | undefined;
    contextTypes?: import("prop-types").ValidationMap<any> | undefined;
    defaultProps?: Partial<ListBoxProps<object>> | undefined;
    displayName?: string | undefined;
} & {
    useOption: typeof useOption;
};
export {};
