/// <reference types="react" />
import { OptionsGeneric } from '@popperjs/core';
export interface WrappedPopperOptions<TModifier> extends Partial<OptionsGeneric<TModifier>> {
    arrow?: boolean;
    offset?: [number, number];
}
export declare function usePopperWrapper<T extends WrappedPopperOptions<any>>(options: T): {
    anchorProps: {
        ref: import("react").Dispatch<import("react").SetStateAction<HTMLElement | null>>;
    };
    contentProps: {
        ref: import("react").Dispatch<import("react").SetStateAction<HTMLElement | null>>;
        style: import("react").CSSProperties;
    };
    arrowProps: {
        ref: import("react").Dispatch<import("react").SetStateAction<HTMLElement | null>>;
        style: import("react").CSSProperties;
    };
    update: (() => Promise<Partial<import("@popperjs/core").State>>) | null;
    forceUpdate: (() => void) | null;
    state: import("@popperjs/core").State | null;
};
export type PopperWrapper = ReturnType<typeof usePopperWrapper>;
