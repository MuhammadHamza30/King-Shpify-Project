import Color from 'color';
import { ThemeType } from './theme-types';
interface RgbaResolver {
    string(alpha?: string | number): string;
    array(alpha?: string | number): [string, string, string, string];
}
type ColorDefinition = string | {
    base: string;
    lighter: string;
    lightest: string;
    darker: string;
    darkest: string;
};
export type FontWeight = '800' | '700' | '600' | '500' | '400';
export type TypographyDefinition = {
    fontSize: string;
    lineHeight: string;
    defaultFontWeight?: FontWeight;
    textTransform?: 'capitalize' | 'full-size-kana' | 'full-width' | 'lowercase' | 'none' | 'uppercase';
    letterSpacing?: string;
    fontFamily?: string;
};
export interface ThemeConfig {
    primaryColor: ColorDefinition;
    v2secondaryColor: ColorDefinition;
    v2tertiaryColor: ColorDefinition;
    neutralColor: ColorDefinition;
    negativeColor: ColorDefinition;
    lightColor: ColorDefinition;
    darkColor: ColorDefinition;
    midColor: ColorDefinition;
    successColor: ColorDefinition;
    warningColor: ColorDefinition;
    errorColor: ColorDefinition;
    typography: {
        h1: TypographyDefinition;
        h2: TypographyDefinition;
        h3: TypographyDefinition;
        h4: TypographyDefinition;
        h5: TypographyDefinition;
        h6: TypographyDefinition;
        p: {
            large: TypographyDefinition;
            medium: TypographyDefinition;
            small: TypographyDefinition;
        };
        mono: {
            large: TypographyDefinition;
            medium: TypographyDefinition;
            small: TypographyDefinition;
        };
    };
    shift?: [number, number];
    type?: ThemeType;
    font?: {
        sans?: string;
        monospace?: string;
    };
    /**
     * There are some design cases where `{color}_lighter` / `{color}_darker`
     * semantics should be reversed. When this option is true, `{color}_lighter`
     * becomes `{color}_darker` and vice versa.
     *
     * Use with care.
     */
    inverseSemantics?: boolean;
}
export type ThemeTypographyKeys = keyof ThemeConfig['typography'];
/**
 * Return a partial `ThemeContext` object with `secondaryColor` and `tertiary`
 * set for greatest contrast.
 */
export declare function createTheme<T extends ThemeConfig>(config: T): {
    isDarkTheme: boolean;
    isLightTheme: boolean;
    isLowContrast: boolean;
    hex: {
        primary: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        v2secondary: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        v2tertiary: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        neutral: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        negative: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        secondary: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        tertiary: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        success: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        warning: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        error: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        light: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        dark: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
        mid: {
            base: string;
            lighter: string;
            lightest: string;
            darker: string;
            darkest: string;
        };
    };
    rgba: {
        primary: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        v2secondary: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        v2tertiary: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        neutral: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        negative: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        secondary: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        tertiary: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        success: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        warning: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        error: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        light: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        dark: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
        mid: {
            base: RgbaResolver;
            lighter: RgbaResolver;
            lightest: RgbaResolver;
            darker: RgbaResolver;
            darkest: RgbaResolver;
        };
    };
    color: {
        primary: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        v2secondary: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        v2tertiary: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        neutral: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        negative: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        secondary: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        tertiary: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        success: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        warning: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        error: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        light: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        dark: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
        mid: {
            base: Color<string>;
            lighter: Color<string>;
            lightest: Color<string>;
            darker: Color<string>;
            darkest: Color<string>;
        };
    };
    font: {
        sans: string;
        monospace: string;
    };
    typography: {
        h1: TypographyDefinition;
        h2: TypographyDefinition;
        h3: TypographyDefinition;
        h4: TypographyDefinition;
        h5: TypographyDefinition;
        h6: TypographyDefinition;
        p: {
            large: TypographyDefinition;
            medium: TypographyDefinition;
            small: TypographyDefinition;
        };
        mono: {
            large: TypographyDefinition;
            medium: TypographyDefinition;
            small: TypographyDefinition;
        };
    };
    key: string;
    config: T;
};
export {};
