import { ComponentProps, PropsWithChildren, ReactElement, ValidationMap, WeakValidationMap } from 'react';
type RenderFn = (props: PropsWithChildren<any>, context?: any) => ReactElement<any, any>;
export type GenericFunctionComponent<T extends RenderFn> = T & {
    propTypes?: WeakValidationMap<ComponentProps<T>>;
    contextTypes?: ValidationMap<any>;
    defaultProps?: Partial<ComponentProps<T>>;
    displayName?: string;
};
/**
 * Wraps a React functional component with the ability to add generic type
 * arguments. Applies a semantic `displayName` and `defaultProps` without side
 * effects, similar to how `forwardRefWrapper` works.
 */
export declare function createGenericComponent<T extends RenderFn>(name: string, render: T): GenericFunctionComponent<T>;
export declare function createGenericComponent<T extends RenderFn>(name: string, defaultProps: ComponentProps<T> | undefined, render: T): GenericFunctionComponent<T>;
export {};
