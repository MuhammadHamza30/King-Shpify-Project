import { ForwardRefExoticComponent, ForwardRefRenderFunction, ReactHTML, WeakValidationMap } from 'react';
import { ElementTypeFromHTMLAttributes, IntrinsicElementProps } from '../types/utility';
/**
 * A component whose root component can be controlled via a `component` prop.
 *
 * Adjusts valid props generically based on the type of `component`.
 */
export interface GenericForwardRefComponent<AllowedTags extends keyof ReactHTML, BaseProps = {}> {
    <Props extends RefAttributes<AllowedTags>>(props: GenericForwardRefProps<AllowedTags, Props, BaseProps>): JSX.Element | null;
    readonly $$typeof: symbol;
    displayName?: string;
    defaultProps?: Partial<GenericForwardRefProps<AllowedTags, RefAttributes<AllowedTags>, BaseProps>>;
    propTypes?: WeakValidationMap<GenericForwardRefProps<AllowedTags, RefAttributes<AllowedTags>, BaseProps>>;
}
type RefAttributes<AllowedTags extends keyof ReactHTML = keyof ReactHTML> = React.RefAttributes<ElementTypeFromHTMLAttributes<IntrinsicElementProps<AllowedTags>>>;
type GenericForwardRefPropsWithoutComponent<AllowedTags extends keyof ReactHTML, Props extends RefAttributes<AllowedTags>, BaseProps = {}> = React.PropsWithChildren<BaseProps & Omit<Props & IntrinsicElementProps<AllowedTags>, keyof BaseProps>>;
type GenericForwardRefProps<AllowedTags extends keyof ReactHTML, Props extends RefAttributes<AllowedTags>, BaseProps = {}> = GenericForwardRefPropsWithoutComponent<AllowedTags, Props, BaseProps> & {
    component?: React.ComponentType<Props>;
};
type GenericForwardRefRenderFunction<AllowedTags extends keyof ReactHTML, BaseProps = {}> = ForwardRefRenderFunction<ElementTypeFromHTMLAttributes<IntrinsicElementProps<AllowedTags>>, GenericForwardRefPropsWithoutComponent<AllowedTags, RefAttributes<AllowedTags>, BaseProps> & {
    /**
     * We use a more lenient `component` type here to ensure that
     * `React.createElement` doesn't complain about mismatching `ref` types.
     */
    component: AllowedTags | ForwardRefExoticComponent<any>;
}>;
interface GenericForwardRefFactory<AllowedTags extends keyof ReactHTML> {
    <BaseProps = {}>(name: string, render: GenericForwardRefRenderFunction<AllowedTags, BaseProps>): GenericForwardRefMap<AllowedTags, BaseProps>;
    <BaseProps extends RefAttributes<AllowedTags>>(name: string, defaultProps: Partial<GenericForwardRefPropsWithoutComponent<AllowedTags, BaseProps>> | undefined, render: GenericForwardRefRenderFunction<AllowedTags, BaseProps>): GenericForwardRefMap<AllowedTags, BaseProps>;
}
type GenericForwardRefMap<AllowedTags extends keyof ReactHTML, BaseProps = {}> = {
    [K in AllowedTags]: GenericForwardRefComponent<K, BaseProps>;
};
/**
 * Creates a mapping of `allowedTags` to `forwardRef` components containing the
 * relevant intrinsic props. This is handy for quickly generating components
 * with dynamic, ref-able root containers. For example, `<CallToAction>` can be
 * a `<button>` or an `<a>`.
 *
 * NOTE: This approach assumes that all props will be forwarded to the element
 * receiving the external ref. The actual root container is configurable via a
 * `component` prop given to `React.createElement`. As such, intrinsic props are
 * intersected with whatever props `component` describes.
 */
export declare function createGenericForwardRefsFactory<Overridables extends keyof ReactHTML>(allowedTags: Overridables[]): GenericForwardRefFactory<Overridables>;
export {};
