{"version":3,"file":"generic-forward-refs.js","sources":["../../../src/libs/generic-forward-refs.ts"],"sourcesContent":["import { ForwardRefExoticComponent, ForwardRefRenderFunction, ReactHTML, WeakValidationMap } from 'react';\nimport { ElementTypeFromHTMLAttributes, IntrinsicElementProps } from '../types/utility';\nimport { forwardRefWrapper } from './forward-ref-wrapper';\n\n/**\n * A component whose root component can be controlled via a `component` prop.\n *\n * Adjusts valid props generically based on the type of `component`.\n */\nexport interface GenericForwardRefComponent<AllowedTags extends keyof ReactHTML, BaseProps = {}> {\n  <Props extends RefAttributes<AllowedTags>>(\n    props: GenericForwardRefProps<AllowedTags, Props, BaseProps>,\n  ): JSX.Element | null;\n\n  // For feature parity with `React.ForwardRefExoticComponent`\n  readonly $$typeof: symbol;\n  displayName?: string;\n  defaultProps?: Partial<GenericForwardRefProps<AllowedTags, RefAttributes<AllowedTags>, BaseProps>>;\n  propTypes?: WeakValidationMap<GenericForwardRefProps<AllowedTags, RefAttributes<AllowedTags>, BaseProps>>;\n}\n\ntype RefAttributes<AllowedTags extends keyof ReactHTML = keyof ReactHTML> = React.RefAttributes<\n  ElementTypeFromHTMLAttributes<IntrinsicElementProps<AllowedTags>>\n>;\n\ntype GenericForwardRefPropsWithoutComponent<\n  AllowedTags extends keyof ReactHTML,\n  Props extends RefAttributes<AllowedTags>,\n  BaseProps = {},\n> = React.PropsWithChildren<BaseProps & Omit<Props & IntrinsicElementProps<AllowedTags>, keyof BaseProps>>;\n\ntype GenericForwardRefProps<\n  AllowedTags extends keyof ReactHTML,\n  Props extends RefAttributes<AllowedTags>,\n  BaseProps = {},\n> = GenericForwardRefPropsWithoutComponent<AllowedTags, Props, BaseProps> & {\n  component?: React.ComponentType<Props>;\n};\n\ntype GenericForwardRefRenderFunction<AllowedTags extends keyof ReactHTML, BaseProps = {}> = ForwardRefRenderFunction<\n  ElementTypeFromHTMLAttributes<IntrinsicElementProps<AllowedTags>>,\n  GenericForwardRefPropsWithoutComponent<AllowedTags, RefAttributes<AllowedTags>, BaseProps> & {\n    /**\n     * We use a more lenient `component` type here to ensure that\n     * `React.createElement` doesn't complain about mismatching `ref` types.\n     */\n    component: AllowedTags | ForwardRefExoticComponent<any>;\n  }\n>;\n\ninterface GenericForwardRefFactory<AllowedTags extends keyof ReactHTML> {\n  <BaseProps = {}>(\n    name: string,\n    render: GenericForwardRefRenderFunction<AllowedTags, BaseProps>,\n  ): GenericForwardRefMap<AllowedTags, BaseProps>;\n\n  <BaseProps extends RefAttributes<AllowedTags>>(\n    name: string,\n    defaultProps: Partial<GenericForwardRefPropsWithoutComponent<AllowedTags, BaseProps>> | undefined,\n    render: GenericForwardRefRenderFunction<AllowedTags, BaseProps>,\n  ): GenericForwardRefMap<AllowedTags, BaseProps>;\n}\n\ntype GenericForwardRefMap<AllowedTags extends keyof ReactHTML, BaseProps = {}> = {\n  [K in AllowedTags]: GenericForwardRefComponent<K, BaseProps>;\n};\n\n/**\n * Creates a mapping of `allowedTags` to `forwardRef` components containing the\n * relevant intrinsic props. This is handy for quickly generating components\n * with dynamic, ref-able root containers. For example, `<CallToAction>` can be\n * a `<button>` or an `<a>`.\n *\n * NOTE: This approach assumes that all props will be forwarded to the element\n * receiving the external ref. The actual root container is configurable via a\n * `component` prop given to `React.createElement`. As such, intrinsic props are\n * intersected with whatever props `component` describes.\n */\nexport function createGenericForwardRefsFactory<Overridables extends keyof ReactHTML>(allowedTags: Overridables[]) {\n  const createForwardRefs: GenericForwardRefFactory<Overridables> = <Props extends RefAttributes<Overridables>>(\n    name: string,\n    defaultPropsOrRender:\n      | GenericForwardRefRenderFunction<Overridables, Props>\n      | Partial<GenericForwardRefPropsWithoutComponent<Overridables, Props>>\n      | undefined,\n    definitelyRender?: GenericForwardRefRenderFunction<Overridables, Props>,\n  ) => {\n    const render = typeof defaultPropsOrRender === 'object' ? definitelyRender : defaultPropsOrRender;\n    const defaultProps = typeof defaultPropsOrRender === 'function' ? {} : defaultPropsOrRender;\n\n    const result: any = {};\n\n    allowedTags.forEach((tag) => {\n      result[tag] = forwardRefWrapper(\n        `${name}.${tag}`,\n\n        {\n          component: tag,\n          ...defaultProps,\n        } as any,\n\n        render as any,\n      );\n    });\n\n    return result;\n  };\n\n  return createForwardRefs;\n}\n"],"names":[],"mappings":";;AAmEA;;;;;;;;;;AAUG;AACG,SAAU,+BAA+B,CAAuC,WAA2B,EAAA;IAC/G,MAAM,iBAAiB,GAA2C,CAChE,IAAY,EACZ,oBAGa,EACb,gBAAuE,KACrE;AACF,QAAA,MAAM,MAAM,GAAG,OAAO,oBAAoB,KAAK,QAAQ,GAAG,gBAAgB,GAAG,oBAAoB,CAAC;AAClG,QAAA,MAAM,YAAY,GAAG,OAAO,oBAAoB,KAAK,UAAU,GAAG,EAAE,GAAG,oBAAoB,CAAC;QAE5F,MAAM,MAAM,GAAQ,EAAE,CAAC;AAEvB,QAAA,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;YAC1B,MAAM,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAC7B,CAAA,EAAG,IAAI,CAAA,CAAA,EAAI,GAAG,CAAA,CAAE,EAEhB,MACE,CAAA,MAAA,CAAA,EAAA,SAAS,EAAE,GAAG,EAAA,EACX,YAAY,CACT,EAER,MAAa,CACd,CAAC;AACJ,SAAC,CAAC,CAAC;AAEH,QAAA,OAAO,MAAM,CAAC;AAChB,KAAC,CAAC;AAEF,IAAA,OAAO,iBAAiB,CAAC;AAC3B;;;;"}