import { forwardRefWrapper } from './forward-ref-wrapper.js';

/**
 * Creates a mapping of `allowedTags` to `forwardRef` components containing the
 * relevant intrinsic props. This is handy for quickly generating components
 * with dynamic, ref-able root containers. For example, `<CallToAction>` can be
 * a `<button>` or an `<a>`.
 *
 * NOTE: This approach assumes that all props will be forwarded to the element
 * receiving the external ref. The actual root container is configurable via a
 * `component` prop given to `React.createElement`. As such, intrinsic props are
 * intersected with whatever props `component` describes.
 */
function createGenericForwardRefsFactory(allowedTags) {
    const createForwardRefs = (name, defaultPropsOrRender, definitelyRender) => {
        const render = typeof defaultPropsOrRender === 'object' ? definitelyRender : defaultPropsOrRender;
        const defaultProps = typeof defaultPropsOrRender === 'function' ? {} : defaultPropsOrRender;
        const result = {};
        allowedTags.forEach((tag) => {
            result[tag] = forwardRefWrapper(`${name}.${tag}`, Object.assign({ component: tag }, defaultProps), render);
        });
        return result;
    };
    return createForwardRefs;
}

export { createGenericForwardRefsFactory };
//# sourceMappingURL=generic-forward-refs.js.map
