{"version":3,"file":"generic-component.js","sources":["../../../src/libs/generic-component.tsx"],"sourcesContent":["import React, { ComponentProps, PropsWithChildren, ReactElement, ValidationMap, WeakValidationMap } from 'react';\n\ntype RenderFn = (props: PropsWithChildren<any>, context?: any) => ReactElement<any, any>;\n\nexport type GenericFunctionComponent<T extends RenderFn> = T & {\n  propTypes?: WeakValidationMap<ComponentProps<T>>;\n  contextTypes?: ValidationMap<any>;\n  defaultProps?: Partial<ComponentProps<T>>;\n  displayName?: string;\n};\n\n/**\n * Wraps a React functional component with the ability to add generic type\n * arguments. Applies a semantic `displayName` and `defaultProps` without side\n * effects, similar to how `forwardRefWrapper` works.\n */\nexport function createGenericComponent<T extends RenderFn>(name: string, render: T): GenericFunctionComponent<T>;\n\nexport function createGenericComponent<T extends RenderFn>(\n  name: string,\n  defaultProps: ComponentProps<T> | undefined,\n  render: T,\n): GenericFunctionComponent<T>;\n\nexport function createGenericComponent<T extends RenderFn>(\n  name: string,\n  defaultPropsOrRender: ComponentProps<T> | undefined | T,\n  definitelyRender?: T,\n): GenericFunctionComponent<T> {\n  const render = (typeof defaultPropsOrRender === 'object' ? definitelyRender : defaultPropsOrRender) as React.FC;\n  const defaultProps = (typeof defaultPropsOrRender === 'function' ? {} : defaultPropsOrRender) as {};\n\n  render.displayName = name;\n  render.defaultProps = defaultProps;\n  return render as GenericFunctionComponent<T>;\n}\n"],"names":[],"mappings":"SAwBgB,sBAAsB,CACpC,IAAY,EACZ,oBAAuD,EACvD,gBAAoB,EAAA;AAEpB,IAAA,MAAM,MAAM,IAAI,OAAO,oBAAoB,KAAK,QAAQ,GAAG,gBAAgB,GAAG,oBAAoB,CAAa,CAAC;AAChH,IAAA,MAAM,YAAY,IAAI,OAAO,oBAAoB,KAAK,UAAU,GAAG,EAAE,GAAG,oBAAoB,CAAO,CAAC;AAEpG,IAAA,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;AAC1B,IAAA,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;AACnC,IAAA,OAAO,MAAqC,CAAC;AAC/C;;;;"}