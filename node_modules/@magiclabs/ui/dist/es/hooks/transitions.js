import { useMemo, useCallback } from 'react';
import { useReducedMotion } from './use-reduced-motion.js';

/**
 * Creates a custom animation hook for `framer-motion`.
 */
function createFramerTransition() {
    const createHook = (variants, reducedMotionVariants) => (targets) => {
        const { initial, animate, exit } = targets;
        const prefersReducedMotion = useReducedMotion();
        const variantsResolved = useMemo(() => (prefersReducedMotion ? Object.assign(Object.assign({}, variants), reducedMotionVariants) : Object.assign({}, variants)), [prefersReducedMotion]);
        const createFramerProps = useCallback((custom = {}) => ({ custom, variants: variantsResolved, initial, animate, exit }), [initial, animate, exit, variantsResolved]);
        return createFramerProps;
    };
    const withVariants = (variants) => {
        const withReducedMotion = (reducedMotionVariants) => {
            return { use: createHook(variants, reducedMotionVariants) };
        };
        return { withReducedMotion, use: createHook(variants) };
    };
    return { withVariants };
}
// --- Out-of-the-box animations -------------------------------------------- //
const fadeTransition = /* @__PURE__ */ createFramerTransition().withVariants({
    visible: { opacity: 1 },
    hidden: { opacity: 0 },
});
function useFade() {
    return fadeTransition.use({
        initial: 'hidden',
        animate: 'visible',
        exit: 'hidden',
    });
}
const scaleTransition = /* @__PURE__ */ createFramerTransition()
    .withVariants({
    hiddenWithScale: (scale) => ({ opacity: 0, scale, transition: { duration: 0.1 } }),
    hiddenWithoutScale: { opacity: 0, scale: 1, transition: { duration: 0.1 } },
    visible: { opacity: 1, scale: 1, transition: { duration: 0.1 } },
})
    .withReducedMotion({
    hiddenWithScale: { opacity: 0, scale: 1, transition: { duration: 0.1 } },
    hiddenWithoutScale: { opacity: 0, scale: 1, transition: { duration: 0.1 } },
});
function useScale() {
    return scaleTransition.use({
        initial: 'hiddenWithScale',
        animate: 'visible',
        exit: 'hiddenWithScale',
    });
}
function useScaleIn() {
    return scaleTransition.use({
        initial: 'hiddenWithScale',
        animate: 'visible',
        exit: 'hiddenWithoutScale',
    });
}
function useScaleOut() {
    return scaleTransition.use({
        initial: 'hiddenWithoutScale',
        animate: 'visible',
        exit: 'hiddenWithScale',
    });
}
const slideTransition = /* @__PURE__ */ createFramerTransition()
    .withVariants({
    hidden: ({ x = 0, y = 0, scale = 1 }) => ({
        x,
        y,
        scale,
        opacity: 0,
        transition: { ease: 'easeInOut', duration: 0.15 },
    }),
    visible: { x: 0, y: 0, opacity: 1, scale: 1, transition: { ease: 'easeInOut', duration: 0.15 } },
})
    .withReducedMotion({
    hidden: {
        x: 0,
        y: 0,
        scale: 1,
        opacity: 0,
        transition: { ease: 'easeInOut', duration: 0.15 },
    },
});
function useSlide() {
    return slideTransition.use({
        initial: 'hidden',
        animate: 'visible',
        exit: 'hidden',
    });
}
const transitions = {
    useFade,
    useSlide,
    useScale,
    useScaleIn,
    useScaleOut,
};

export { createFramerTransition, transitions };
//# sourceMappingURL=transitions.js.map
