{"version":3,"file":"use-theme.js","sources":["../../../../src/components/theme-provider/use-theme.ts"],"sourcesContent":["import { useContext, createContext } from 'react';\nimport { Theme, DEFAULT_THEME, createTheme } from '../../libs/theme';\n\nexport interface ThemeContext {\n  theme: Theme | null;\n}\n\nexport const ThemeContext = /* @__PURE__ */ createContext<ThemeContext>({\n  theme: null,\n});\n\ninterface UseThemeOptions {\n  /**\n   * There are some design cases where `{color}_lighter` / `{color}_darker`\n   * semantics should be reversed. When this option is true, `{color}_lighter`\n   * becomes `{color}_darker` and vice versa.\n   *\n   * Use with care.\n   */\n  inverseSemantics?: boolean;\n}\n\nexport function useTheme(options?: UseThemeOptions) {\n  const theme = useContext(ThemeContext).theme ?? DEFAULT_THEME;\n\n  if (options?.inverseSemantics) {\n    const themeWithInverseSemantics = createTheme({ ...theme.config, inverseSemantics: true });\n    return themeWithInverseSemantics;\n  }\n\n  return theme;\n}\n"],"names":[],"mappings":";;;;;AAOa,MAAA,YAAY,mBAAmB,aAAa,CAAe;AACtE,IAAA,KAAK,EAAE,IAAI;AACZ,CAAA,EAAE;AAaG,SAAU,QAAQ,CAAC,OAAyB,EAAA;;IAChD,MAAM,KAAK,GAAG,CAAA,EAAA,GAAA,UAAU,CAAC,YAAY,CAAC,CAAC,KAAK,MAAI,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,aAAa,CAAC;AAE9D,IAAA,IAAI,OAAO,KAAP,IAAA,IAAA,OAAO,uBAAP,OAAO,CAAE,gBAAgB,EAAE;AAC7B,QAAA,MAAM,yBAAyB,GAAG,WAAW,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,KAAK,CAAC,MAAM,CAAA,EAAA,EAAE,gBAAgB,EAAE,IAAI,EAAA,CAAA,CAAG,CAAC;AAC3F,QAAA,OAAO,yBAAyB,CAAC;AAClC,KAAA;AAED,IAAA,OAAO,KAAK,CAAC;AACf;;;;"}