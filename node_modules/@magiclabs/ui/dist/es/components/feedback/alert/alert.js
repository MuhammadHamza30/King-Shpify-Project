import { AnimatePresence, motion } from 'framer-motion';
import React from 'react';
import '../../primitives/call-to-action/call-to-action.js';
import 'react-aria';
import '@seznam/compose-react-refs';
import '@react-aria/ssr';
import clsx from 'clsx';
import { Flex } from '../../layout/flexbox/flexbox.js';
import { Inset } from '../../layout/inset/inset.js';
import { transitions } from '../../../hooks/transitions.js';
import 'blueimp-md5';
import 'color';
import '@artsy/fresnel';
import '../../theme-provider/theme-provider.js';
import '../../theme-provider/theme-head.js';
import 'usable-react';
import 'watch-resize';
import 'react-dom';
import 'react-popper';
import { Icon } from '../../icons/icon-base.js';
import { Exclaim } from '../../icons/monochrome/exclaim.js';
import { Info } from '../../icons/monochrome/info.js';
import { Remove } from '../../icons/monochrome/remove.js';
import { SuccessFilled } from '../../icons/monochrome/success-filled.js';
import { Warning } from '../../icons/monochrome/warning.js';
import 'react-stately';
import '../../../libs/collections.js';
import '../../primitives/text-button/text-button.js';
import modules_8404409d from './alert.less.js';
import '../announcer.js';
import '../../primitives/radio/radio.js';
import '../../primitives/skeleton/skeleton.js';
import '../../primitives/typography/typography.js';
import '../../primitives/button-v2/button-v2.js';
import 'ua-parser-js';

const Alert = (props) => {
    const { label, type = 'important', icon = true, dismissable = false, children } = props;
    const [dismissed, setDismissed] = React.useState(false);
    const getScaleProps = transitions.useScale();
    let iconType;
    switch (type) {
        case 'success':
            iconType = SuccessFilled;
            break;
        case 'warning':
            iconType = Warning;
            break;
        case 'error':
            iconType = Exclaim;
            break;
        case 'neutral':
            iconType = Info;
            break;
        case 'important':
        default:
            iconType = Info;
            break;
    }
    return (React.createElement(AnimatePresence, { initial: false }, !dismissed && (React.createElement(motion.div, Object.assign({ className: clsx([modules_8404409d.Alert, modules_8404409d[type]]) }, getScaleProps(0.85)),
        React.createElement(Flex.Row, { vertical: "flex-start", style: { width: '100%' } },
            icon && (React.createElement(Inset, { top: 2 },
                React.createElement(Icon, { size: 20, type: iconType, className: modules_8404409d.icon }))),
            React.createElement(Flex.Item, { grow: 1, role: "status", className: modules_8404409d.message },
                label && React.createElement("div", { className: modules_8404409d.label }, label),
                children),
            dismissable && (React.createElement(Inset, { top: 2 },
                React.createElement("button", { className: modules_8404409d.dismissable, type: "button", onClick: () => setDismissed(true) },
                    React.createElement(Icon, { size: 20, type: Remove })))))))));
};

export { Alert };
//# sourceMappingURL=alert.js.map
