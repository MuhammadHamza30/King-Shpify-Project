import { motion, AnimatePresence } from 'framer-motion';
import React, { useRef, useReducer, useCallback, useMemo } from 'react';
import { useIsMounted } from 'usable-react';
import { transitions } from '../../../../hooks/transitions.js';
import clsx from 'clsx';
import { Icon } from '../../../icons/icon-base.js';
import { Exclaim } from '../../../icons/monochrome/exclaim.js';
import { Info } from '../../../icons/monochrome/info.js';
import { SuccessFilled } from '../../../icons/monochrome/success-filled.js';
import { Warning } from '../../../icons/monochrome/warning.js';
import { Flex } from '../../../layout/flexbox/flexbox.js';
import '@react-aria/ssr';
import 'react-aria';
import { Inset } from '../../../layout/inset/inset.js';
import '@seznam/compose-react-refs';
import 'blueimp-md5';
import 'color';
import '@artsy/fresnel';
import { useTheme } from '../../../theme-provider/use-theme.js';
import { ThemeProvider } from '../../../theme-provider/theme-provider.js';
import '../../../theme-provider/theme-head.js';
import 'watch-resize';
import { EphemeralPortal } from '../../../layout/ephemeral-portal.js';
import 'react-popper';
import { ToastContext } from '../use-toast.js';
import modules_1680eb67 from './toast-provider.less.js';

let toastID = 0;
const toastIcons = {
    success: () => SuccessFilled,
    warning: () => Warning,
    error: () => Exclaim,
    info: () => Info,
};
const ToastProvider = (props) => {
    const { position, children } = props;
    const isMounted = useIsMounted();
    const theme = useTheme();
    const toastsRef = useRef([]);
    const forceUpdate = useReducer((x) => x + 1, 0)[1];
    const removeToast = useCallback((id) => {
        toastsRef.current = toastsRef.current.filter((toast) => toast.id !== id);
        forceUpdate();
    }, []);
    const createToast = useCallback((options) => {
        const { message, messageOnly, type = 'info', lifespan = 2000 } = options;
        const id = ++toastID;
        toastsRef.current.push({ message, messageOnly, type, id });
        forceUpdate();
        setTimeout(() => {
            if (isMounted()) {
                removeToast(id);
            }
        }, lifespan);
        return id;
    }, []);
    const toastCtx = useMemo(() => ({ createToast, removeToast }), [createToast, removeToast]);
    const getSlideProps = transitions.useSlide();
    const toasts = (position === null || position === void 0 ? void 0 : position.startsWith('top')) ? [...toastsRef.current] : [...toastsRef.current].reverse();
    const activeToasts = toasts.map((toast) => {
        return (React.createElement(motion.div, Object.assign({ layout: true, className: clsx([modules_1680eb67.toast, modules_1680eb67[toast.type]]), "data-mg-toast-id": toast.id, key: toast.id, "aria-live": ['info', 'success', 'warning'].includes(toast.type) ? 'polite' : 'assertive' }, getSlideProps({ x: 0, y: (position === null || position === void 0 ? void 0 : position.startsWith('top')) ? -10 : 10 })),
            React.createElement(Flex.Row, { vertical: "flex-start" },
                !toast.messageOnly && (React.createElement(Inset, { top: 2 },
                    React.createElement(Icon, { inline: false, size: 20, type: toastIcons[toast.type]() }))),
                React.createElement(Flex.Item, { shrink: 0, grow: 1, className: modules_1680eb67.message }, toast.message))));
    });
    return (React.createElement(ToastContext.Provider, { value: toastCtx },
        children,
        React.createElement(EphemeralPortal, null,
            React.createElement(ThemeProvider, { theme: theme },
                React.createElement(Inset, { all: 40 },
                    React.createElement("div", { className: modules_1680eb67.ToastNotifications },
                        React.createElement("div", { className: clsx([modules_1680eb67.toastContainer, modules_1680eb67[`position_${position}`]]) },
                            React.createElement(AnimatePresence, null, activeToasts))))))));
};

export { ToastProvider };
//# sourceMappingURL=toast-provider.js.map
