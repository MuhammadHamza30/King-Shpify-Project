import { __rest } from '../../../_virtual/_tslib.js';
import composeRefs from '@seznam/compose-react-refs';
import { AnimatePresence, motion } from 'framer-motion';
import React from 'react';
import { createFramerTransition } from '../../../hooks/transitions.js';
import { useID } from '../../../hooks/use-id.js';
import { useIsomorphicLayoutEffect } from '../../../hooks/use-isomorphic-layout-effect.js';
import clsx from 'clsx';
import { createErrorWithCode } from '../../../libs/exceptions.js';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { mergeProps } from '../../../libs/merge-props.js';
import 'blueimp-md5';
import 'color';
import '@artsy/fresnel';
import { useTheme } from '../../theme-provider/use-theme.js';
import { ThemeProvider } from '../../theme-provider/theme-provider.js';
import '../../theme-provider/theme-head.js';
import { AutoResizingDiv } from '../auto-resizing-div.js';
import { EphemeralPortal } from '../ephemeral-portal.js';
import { usePopperWrapper } from './use-popper-wrapper.js';
import modules_ebadfd01 from './popover.less.js';

/* eslint-disable no-nested-ternary */
const PopoverBase = /* @__PURE__ */ forwardRefWrapper('Popover', {
    in: false,
    arrow: true,
    placement: 'bottom',
    strategy: 'absolute',
    portalize: false,
    appearance: 'default',
    stretch: false,
}, (props, externalRef) => {
    var _a, _b;
    const { children, in: inProp, portalize, placement, arrow, strategy, offset, appearance, stretch, className } = props, otherProps = __rest(props, ["children", "in", "portalize", "placement", "arrow", "strategy", "offset", "appearance", "stretch", "className"]);
    const popper = usePopperWrapper({ arrow, placement: placement, strategy: strategy, offset });
    const passthroughProps = {
        _portalize: portalize,
        _in: inProp,
        _hasArrow: arrow,
        _popper: popper,
        _appearance: appearance,
        _stretch: stretch,
    };
    const anchor = (_a = React.Children.map(children, (child) => {
        if (React.isValidElement(child) && child.type === PopoverAnchor) {
            return React.cloneElement(child, mergeProps(child.props, Object.assign({}, passthroughProps)));
        }
        return null;
    })) === null || _a === void 0 ? void 0 : _a.filter(Boolean);
    const content = (_b = React.Children.map(children, (child) => {
        if (React.isValidElement(child) && child.type === PopoverContent) {
            return React.cloneElement(child, mergeProps(child.props, Object.assign({}, passthroughProps)));
        }
        return null;
    })) === null || _b === void 0 ? void 0 : _b.filter(Boolean);
    // Validate that only one <Popover.Anchor> is received.
    const numAnchors = React.Children.count(anchor);
    if (numAnchors > 1) {
        throw createErrorWithCode('POPOVER_ONLY_ONE_ANCHOR_ALLOWED', PopoverBase, `Only one <Popover.Anchor> element can be rendered in a <Popover> at a time. Received: ${numAnchors}`);
    }
    // Validate that only one <Popover.Content> is received.
    const numContents = React.Children.count(content);
    if (numContents > 1) {
        throw createErrorWithCode('POPOVER_ONLY_ONE_CONTENT_ALLOWED', PopoverBase, `Only one <Popover.Content> element can be rendered in a <Popover> at a time. Received: ${numContents}`);
    }
    if (React.Children.count(children) > numAnchors + numContents) {
        // Validate that only <Popover.Content> and <Popover.Anchor> components are received as children.
        throw createErrorWithCode('POPOVER_INCOMPATIBLE_CHILDREN_DETECTED', PopoverBase, 'Only children wrapped with <Popover.Anchor> or <Popover.Content> are allowed within a <Popover>.');
    }
    return (React.createElement("div", Object.assign({ className: clsx([modules_ebadfd01.Popover, className]) }, otherProps, { ref: externalRef }),
        anchor,
        content));
});
const PopoverAnchor = /* @__PURE__ */ forwardRefWrapper('Popover.Anchor', (props, externalRef) => {
    const _a = props, { children, _in, _portalize, _hasArrow, _popper, _appearance, _stretch } = _a, otherProps = __rest(_a, ["children", "_in", "_portalize", "_hasArrow", "_popper", "_appearance", "_stretch"]);
    return (React.createElement("div", Object.assign({}, otherProps, { ref: composeRefs(_popper.anchorProps.ref, externalRef) }), children));
});
function getPopoverContentTransitionRotation(placement) {
    switch (placement) {
        case 'top':
            return { rotateX: '-7deg', rotateY: '0deg', transformOrigin: 'bottom center' };
        case 'top-start':
            return { rotateX: '7deg', rotateY: '7deg', transformOrigin: 'bottom left' };
        case 'top-end':
            return { rotateX: '7deg', rotateY: '-7deg', transformOrigin: 'bottom right' };
        case 'right':
            return { rotateX: '0deg', rotateY: '7deg', transformOrigin: 'left center' };
        case 'right-start':
            return { rotateX: '-7deg', rotateY: '7deg', transformOrigin: 'left top' };
        case 'right-end':
            return { rotateX: '7deg', rotateY: '7deg', transformOrigin: 'left bottom' };
        case 'left':
            return { rotateX: '0deg', rotateY: '-7deg', transformOrigin: 'right center' };
        case 'left-start':
            return { rotateX: '-7deg', rotateY: '-7deg', transformOrigin: 'right top' };
        case 'left-end':
            return { rotateX: '7deg', rotateY: '-7deg', transformOrigin: 'right bottom' };
        case 'bottom':
            return { rotateX: '-7deg', rotateY: '0deg', transformOrigin: 'top center' };
        case 'bottom-start':
            return { rotateX: '-7deg', rotateY: '7deg', transformOrigin: 'top left' };
        case 'bottom-end':
            return { rotateX: '-7deg', rotateY: '-7deg', transformOrigin: 'top right' };
        default:
            return { rotateX: '0deg', rotateY: '0deg', transformOrigin: 'center' };
    }
}
const popoverContentTransition = /* @__PURE__ */ createFramerTransition().withVariants({
    initial: ({ placement }) => (Object.assign(Object.assign({ opacity: 0, scale: 0.96 }, getPopoverContentTransitionRotation(placement)), { transition: { type: 'tween', ease: 'easeInOut', duration: 0.2 }, perspective: '500px' })),
    animate: () => ({
        opacity: 1,
        scale: 1,
        rotateX: '0deg',
        rotateY: '0deg',
        transition: { type: 'tween', ease: 'easeInOut', duration: 0.2 },
        perspective: '500px',
    }),
});
const PopoverContent = /* @__PURE__ */ forwardRefWrapper('Popover.Content', (props, externalRef) => {
    var _a, _b;
    const _c = props, { children, className, _in, _portalize, _hasArrow, _popper, _appearance, _stretch } = _c, otherProps = __rest(_c, ["children", "className", "_in", "_portalize", "_hasArrow", "_popper", "_appearance", "_stretch"]);
    const id = useID();
    const theme = useTheme();
    const getPopoverContentTransitionProps = popoverContentTransition.use({
        initial: 'initial',
        animate: 'animate',
        exit: 'initial',
    });
    useIsomorphicLayoutEffect(() => {
        var _a;
        (_a = _popper.forceUpdate) === null || _a === void 0 ? void 0 : _a.call(_popper);
    }, [_in]);
    const content = (React.createElement("div", Object.assign({ className: clsx([
            modules_ebadfd01.PopoverContainer,
            _stretch && modules_ebadfd01[((_a = _popper.state) === null || _a === void 0 ? void 0 : _a.placement.match(/(top|bottom)/)) ? 'stretchHorizontal' : 'stretchVertical'],
            _hasArrow && _appearance === 'default' && modules_ebadfd01.hasArrow,
        ]) }, _popper.contentProps),
        React.createElement(AnimatePresence, null, _in && (React.createElement(motion.div, Object.assign({ key: id, className: clsx([modules_ebadfd01.PopoverContent, _appearance === 'none' && modules_ebadfd01.appearanceNone, className]) }, otherProps, getPopoverContentTransitionProps({ placement: (_b = _popper.state) === null || _b === void 0 ? void 0 : _b.placement }), { ref: externalRef }),
            React.createElement(AutoResizingDiv, { observerOnly: true, onResize: _popper.update }, children))))));
    return _portalize ? (React.createElement(EphemeralPortal, { className: modules_ebadfd01.PopoverPortal },
        React.createElement(ThemeProvider, { theme: theme },
            React.createElement("div", { className: modules_ebadfd01.Popover }, content)))) : (content);
});
const Popover = /* @__PURE__ */ Object.assign(PopoverBase, { Anchor: PopoverAnchor, Content: PopoverContent });

export { Popover };
//# sourceMappingURL=popover.js.map
