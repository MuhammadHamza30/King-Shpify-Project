import composeRefs from '@seznam/compose-react-refs';
import { motion } from 'framer-motion';
import React, { useContext, createContext, useRef, useMemo, useEffect } from 'react';
import { useListBox, useOption as useOption$1, useFocusRing } from 'react-aria';
import { useListState } from 'react-stately';
import { createFramerTransition } from '../../../hooks/transitions.js';
import clsx from 'clsx';
import { validateCollection } from '../../../libs/collections.js';
import { createErrorWithCode } from '../../../libs/exceptions.js';
import { createGenericComponent } from '../../../libs/generic-component.js';
import { mergeProps } from '../../../libs/merge-props.js';
import modules_92497bfd from './list-box.less.js';

const listboxTransition = /* @__PURE__ */ createFramerTransition().withVariants({
    initial: {
        opacity: 0,
        scale: 0.96,
        rotateX: '-7deg',
        rotateY: '0deg',
        transformOrigin: 'top center',
        transition: { type: 'tween', ease: 'easeInOut', duration: 0.2 },
        perspective: '500px',
    },
    animate: {
        opacity: 1,
        scale: 1,
        rotateX: '0deg',
        rotateY: '0deg',
        transition: { type: 'tween', ease: 'easeInOut', duration: 0.2 },
        perspective: '500px',
    },
});
const ListBoxContext = /* @__PURE__ */ createContext(null);
function ListBoxRender(props) {
    var _a;
    const { label, minHeight, maxHeight } = props;
    // Validate props & children
    if (!label && !props['aria-label'] && !props['aria-labelledby']) {
        throw createErrorWithCode('LIST_BOX_MISSING_ACCESSIBILTY_LABEL', GenericListBox, 'If you do not provide a visible `label`, you must specify an `aria-label` or `aria-labelledby` attribute for accessibility');
    }
    const validCollectionChildren = validateCollection(props, GenericListBox);
    // Create listbox state & refs
    const { state: contextualState, ref: contextualRef } = (_a = useContext(ListBoxContext)) !== null && _a !== void 0 ? _a : {};
    const listboxRef = useRef(null);
    const state = contextualState !== null && contextualState !== void 0 ? contextualState : useListState(Object.assign(Object.assign({}, props), { children: validCollectionChildren }));
    const { listBoxProps, labelProps } = useListBox(props, state, listboxRef);
    // listbox animation
    const getListBoxTransitionProps = listboxTransition.use({
        initial: 'initial',
        animate: 'animate',
        exit: 'initial',
    });
    return (React.createElement(motion.div, Object.assign({ className: modules_92497bfd.ListBox }, getListBoxTransitionProps()),
        label && React.createElement("div", Object.assign({}, mergeProps({ className: modules_92497bfd.label }, labelProps)), label),
        React.createElement("ul", Object.assign({}, listBoxProps, { style: { minHeight, maxHeight }, ref: composeRefs(listboxRef, contextualRef) }), [...state.collection].map((item) => (React.createElement(Option, { key: item.key, item: item, state: state }))))));
}
const OptionContext = /* @__PURE__ */ createContext({ isFocused: false, isSelected: false, isPressed: false, isDisabled: false });
function useOption() {
    return useContext(OptionContext);
}
function Option(props) {
    const { item, state } = props;
    // Derive option state and create refs
    const ref = React.useRef(null);
    const { optionProps, isFocused, isSelected, isPressed, isDisabled } = useOption$1({ key: item.key }, state, ref);
    const { isFocusVisible, focusProps } = useFocusRing();
    // Create a context wrapping items with critical metadata
    const ctx = useMemo(() => ({ isFocused, isSelected, isPressed, isDisabled }), [isFocused, isSelected, isPressed, isDisabled]);
    useEffect(() => {
        var _a;
        if (isFocused) {
            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
        }
    }, [isFocused]);
    const isInListBoxContext = !!useContext(ListBoxContext);
    return (React.createElement(OptionContext.Provider, { value: ctx },
        React.createElement("li", Object.assign({}, mergeProps({
            className: clsx(modules_92497bfd.Option, isSelected && modules_92497bfd.selected, isFocused && (isFocusVisible || isInListBoxContext) && modules_92497bfd.focused),
        }, optionProps, focusProps), { ref: ref }), item.rendered)));
}
const GenericListBox = /* @__PURE__ */ createGenericComponent('ListBox', ListBoxRender);
const ListBox = /* @__PURE__ */ Object.assign(GenericListBox, { useOption });

export { ListBox, ListBoxContext, useOption };
//# sourceMappingURL=list-box.js.map
