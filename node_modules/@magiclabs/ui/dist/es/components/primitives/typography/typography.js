import { __rest } from '../../../_virtual/_tslib.js';
import React from 'react';
import '@react-aria/ssr';
import 'react-aria';
import 'clsx';
import 'blueimp-md5';
import 'color';
import '@artsy/fresnel';
import { useTheme } from '../../theme-provider/use-theme.js';
import '../../theme-provider/theme-provider.js';
import '../../theme-provider/theme-head.js';

function buildTypographyStyle(config, weight, color) {
    var _a, _b;
    const typographyStyle = {
        fontWeight: (_b = (_a = weight) !== null && _a !== void 0 ? _a : config.defaultFontWeight) !== null && _b !== void 0 ? _b : 'normal',
        fontSize: config.fontSize,
        lineHeight: config.lineHeight,
        color: color !== null && color !== void 0 ? color : 'inherit',
    };
    if (config.textTransform)
        typographyStyle.textTransform = config.textTransform;
    if (config.letterSpacing)
        typographyStyle.letterSpacing = config.letterSpacing;
    if (config.fontFamily)
        typographyStyle.fontFamily = config.fontFamily;
    return typographyStyle;
}
function buildTypographyComponent(Tag, size = null, themeKey = null) {
    return (_a) => {
        var _b, _c;
        var { children, weight, color, tagOverride, style = {} } = _a, rest = __rest(_a, ["children", "weight", "color", "tagOverride", "style"]);
        const theme = useTheme();
        const key = (_b = themeKey !== null && themeKey !== void 0 ? themeKey : Tag) !== null && _b !== void 0 ? _b : 'h1';
        const config = size ? theme.typography[key][size] : theme.typography[key];
        const TypographyTag = (_c = tagOverride) !== null && _c !== void 0 ? _c : Tag;
        return (React.createElement(TypographyTag, Object.assign({}, rest, { style: Object.assign(Object.assign({}, buildTypographyStyle(config, weight, color)), style) }), children));
    };
}
const H1 = /* @__PURE__ */ buildTypographyComponent('h1');
const H2 = /* @__PURE__ */ buildTypographyComponent('h2');
const H3 = /* @__PURE__ */ buildTypographyComponent('h3');
const H4 = /* @__PURE__ */ buildTypographyComponent('h4');
const H5 = /* @__PURE__ */ buildTypographyComponent('h5');
const H6 = /* @__PURE__ */ buildTypographyComponent('h6');
const BodyLarge = /* @__PURE__ */ buildTypographyComponent('p', 'large');
const BodyMedium = /* @__PURE__ */ buildTypographyComponent('p', 'medium');
const BodySmall = /* @__PURE__ */ buildTypographyComponent('p', 'small');
const MonoLarge = /* @__PURE__ */ buildTypographyComponent('p', 'large', 'mono');
const MonoMedium = /* @__PURE__ */ buildTypographyComponent('p', 'medium', 'mono');
const MonoSmall = /* @__PURE__ */ buildTypographyComponent('p', 'small', 'mono');
H1.displayName = 'Typography.H1';

export { BodyLarge, BodyMedium, BodySmall, H1, H2, H3, H4, H5, H6, MonoLarge, MonoMedium, MonoSmall };
//# sourceMappingURL=typography.js.map
