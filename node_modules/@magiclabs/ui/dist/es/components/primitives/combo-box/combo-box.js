import { __rest } from '../../../_virtual/_tslib.js';
import { AnimatePresence } from 'framer-motion';
import React, { useState, useMemo, useRef, useEffect } from 'react';
import { useFilter, useComboBox, useButton, useOverlay, FocusScope, DismissButton, useSearchField } from 'react-aria';
import { useComboBoxState, useSearchFieldState } from 'react-stately';
import clsx from 'clsx';
import { validateCollection } from '../../../libs/collections.js';
import { createGenericComponent } from '../../../libs/generic-component.js';
import { mergeProps } from '../../../libs/merge-props.js';
import { Icon } from '../../icons/icon-base.js';
import { AsteriskBold } from '../../icons/monochrome/asterisk-bold.js';
import { CaretDown } from '../../icons/monochrome/caret-down.js';
import { CaretUp } from '../../icons/monochrome/caret-up.js';
import { Remove } from '../../icons/monochrome/remove.js';
import { Search } from '../../icons/monochrome/search.js';
import { Flex } from '../../layout/flexbox/flexbox.js';
import { Outset } from '../../layout/outset/outset.js';
import '@seznam/compose-react-refs';
import '@react-aria/ssr';
import 'blueimp-md5';
import 'color';
import '@artsy/fresnel';
import { useTheme } from '../../theme-provider/use-theme.js';
import '../../theme-provider/theme-provider.js';
import '../../theme-provider/theme-head.js';
import 'usable-react';
import 'watch-resize';
import 'react-dom';
import 'react-popper';
import { useOption, ListBoxContext, ListBox } from '../list-box/list-box.js';
import { TextField } from '../text-field/text-field.js';
import modules_ba27b399 from './combo-box.less.js';

function ComboBoxRender(props) {
    const { filter: customFilter, size = 'md', showMenuButton, showSearchIcon, menuMinHeight, menuMaxHeight, inputValue, defaultInputValue, 
    /**
     * If true, the input contents will be selected on focus.
     */
    autoSelect } = props, propsWithoutCustom = __rest(props, ["filter", "size", "showMenuButton", "showSearchIcon", "menuMinHeight", "menuMaxHeight", "inputValue", "defaultInputValue", "autoSelect"]);
    const { items, label, isRequired } = props;
    const validCollectionChildren = validateCollection(propsWithoutCustom, GenericComboBox);
    // --- Advanced use-case: custom `items` filtering
    const [filterValue, setFilterValue] = useState(defaultInputValue);
    const filteredItems = useMemo(() => {
        if (items && customFilter) {
            return Array.from(items)
                .filter(Boolean)
                .filter((item) => {
                return customFilter(item, filterValue !== null && filterValue !== void 0 ? filterValue : '');
            });
        }
        return undefined;
    }, [items, customFilter, filterValue]);
    // --- State, props, and refs containing accessibility metadata for use with the combo-box
    const inputRef = useRef(null);
    const listBoxRef = useRef(null);
    const popoverRef = useRef(document.createElement('div'));
    const buttonRef = useRef(null);
    const state = useComboBoxState(Object.assign(Object.assign({}, mergeProps(propsWithoutCustom, {
        inputValue: inputValue !== null && inputValue !== void 0 ? inputValue : filterValue,
        onInputChange: setFilterValue,
    })), { items: filteredItems || items, children: validCollectionChildren, defaultFilter: useFilter({ sensitivity: 'base' }).contains }));
    const { buttonProps: triggerProps, inputProps, listBoxProps, labelProps, } = useComboBox(Object.assign(Object.assign({}, propsWithoutCustom), { inputRef,
        listBoxRef,
        popoverRef, buttonRef: showMenuButton ? buttonRef : undefined }), state);
    // If the `autoSelect` prop is set, we'll select the input contents whenever
    // the combobox gets focus.
    useEffect(() => {
        var _a;
        if (state.isFocused && autoSelect) {
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.select();
        }
    }, [state.isFocused, autoSelect]);
    // Props for an menu trigger button; currently unused...
    const { buttonProps } = useButton(triggerProps, buttonRef);
    // --- Manage listbox overlay state
    const { overlayProps } = useOverlay({
        isOpen: state.isOpen,
        onClose: state.close,
        shouldCloseOnBlur: true,
        isDismissable: false,
    }, popoverRef);
    // --- Pass the combo-box state and ref to the `ListBox` via React context
    const listBoxCtx = useMemo(() => ({
        state,
        ref: listBoxRef,
    }), [state, listBoxRef]);
    const theme = useTheme();
    return (React.createElement("div", { className: modules_ba27b399.ComboBox },
        label && (React.createElement(React.Fragment, null,
            React.createElement("label", Object.assign({ className: clsx([modules_ba27b399.ComboBoxLabel, modules_ba27b399[`size_${size}`]]) }, labelProps),
                React.createElement(Flex.Row, { alignItems: "center" },
                    React.createElement(Outset, { right: 3, trim: "horizontal" },
                        React.createElement("span", null, label),
                        isRequired && React.createElement(Icon, { size: 10, color: theme.hex.primary.base, type: AsteriskBold })))))),
        React.createElement(TextField, Object.assign({}, mergeProps(inputProps), { size: size, prefix: !!showSearchIcon && React.createElement(Icon, { style: { opacity: 0.5 }, size: 14, type: Search }), suffix: !!state.inputValue.length && React.createElement(ClearInputButton, { state: state, inputRef: inputRef }), addonAfter: showMenuButton && (React.createElement(TextField.AddonButton, Object.assign({}, buttonProps, { ref: buttonRef }),
                React.createElement(Icon, { size: 14, type: state.isOpen ? CaretUp : CaretDown }))), ref: inputRef })),
        React.createElement(AnimatePresence, null, state.isOpen && (React.createElement(FocusScope, { restoreFocus: true },
            React.createElement("div", Object.assign({ className: modules_ba27b399.listboxContainer }, overlayProps, { ref: popoverRef }),
                React.createElement(ListBoxContext.Provider, { value: listBoxCtx },
                    React.createElement(ListBox, Object.assign({}, listBoxProps, { minHeight: menuMinHeight, maxHeight: menuMaxHeight }))),
                React.createElement(DismissButton, { onDismiss: state.close })))))));
}
const ClearInputButton = (props) => {
    const { state, inputRef } = props;
    const searchProps = {
        // label doesn't matter because we use `aria-hidden=true`;
        // just need this to silence the warning from `react-aria`
        'aria-label': 'n/a',
        value: state.inputValue,
        onChange: (v) => state.setInputValue(v),
    };
    const searchState = useSearchFieldState(searchProps);
    const { clearButtonProps } = useSearchField(searchProps, searchState, inputRef);
    const clearButtonRef = React.useRef(null);
    const { buttonProps } = useButton(clearButtonProps, clearButtonRef);
    return (React.createElement("button", Object.assign({}, mergeProps({ className: modules_ba27b399.ClearInputButton }, buttonProps), { tabIndex: -1, "aria-hidden": "true" }),
        React.createElement(Icon, { size: 14, type: Remove })));
};
const GenericComboBox = /* @__PURE__ */ createGenericComponent('ComboBox', ComboBoxRender);
const ComboBox = /* @__PURE__ */ Object.assign(GenericComboBox, {
    useOption,
});

export { ComboBox };
//# sourceMappingURL=combo-box.js.map
