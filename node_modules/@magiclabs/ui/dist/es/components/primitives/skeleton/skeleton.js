import { __rest } from '../../../_virtual/_tslib.js';
import React from 'react';
import clsx from 'clsx';
import { mergeProps } from '../../../libs/merge-props.js';
import modules_a36a1a62 from './skeleton.less.js';

/**
 * Renders an animated loading skeleton that automatically adapts to the current
 * font-size and line-height.
 *
 * Based on `react-loading-skeleton`.
 *
 * @see the LICENSE file at the root of this source tree:
 *   https://github.com/dvtng/react-loading-skeleton
 *
 * Modifications from original source:
 *   - Removes usage of `emotion` for CSS.
 *   - Adds `shape` prop to control the general shape of the skeleton.
 *   - Adds default TypeScript support.
 */
const Skeleton = (props) => {
    const { count = 1, duration = 1200, shape, width, height } = props, otherProps = __rest(props, ["count", "duration", "shape", "width", "height"]);
    const elements = [];
    for (let i = 0; i < count; i++) {
        elements.push(React.createElement("span", Object.assign({ key: i }, mergeProps({
            className: clsx(modules_a36a1a62.item, shape === 'circle' && modules_a36a1a62.circle, shape === 'pill' && modules_a36a1a62.pill),
            style: {
                width,
                height,
                animation: `${modules_a36a1a62.skeletonAnim} ${duration}ms ease-in-out infinite`,
            },
        }, otherProps)), "\u200C"));
    }
    return React.createElement("span", { className: clsx(modules_a36a1a62.Skeleton) }, elements);
};
Skeleton.displayName = 'Skeleton';

export { Skeleton };
//# sourceMappingURL=skeleton.js.map
