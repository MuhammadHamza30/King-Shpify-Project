import { __rest } from '../../../_virtual/_tslib.js';
import composeRefs from '@seznam/compose-react-refs';
import { AnimatePresence, motion } from 'framer-motion';
import React, { createContext, useRef, useContext } from 'react';
import { useFocusRing, usePress, useHover } from 'react-aria';
import { transitions } from '../../../hooks/transitions.js';
import clsx from 'clsx';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { mergeProps } from '../../../libs/merge-props.js';
import '@react-aria/ssr';
import 'blueimp-md5';
import 'color';
import '@artsy/fresnel';
import '../../theme-provider/theme-provider.js';
import '../../theme-provider/theme-head.js';
import 'usable-react';
import 'watch-resize';
import 'react-dom';
import 'react-popper';
import { Spacer } from '../../layout/spacer.js';
import modules_331aea95 from './radio.less.js';

/* eslint-disable jsx-a11y/label-has-associated-control */
const RadioGroupContext = /* @__PURE__ */ createContext({});
const RadioGroup = (props) => {
    const { name = '', selectedValue, onChange = () => { }, children } = props;
    return React.createElement(RadioGroupContext.Provider, { value: { name, selectedValue, onChange } }, children);
};
RadioGroup.displayName = 'RadioGroup';
const Radio = /* @__PURE__ */ forwardRefWrapper('Radio', { color: 'primary' }, (props, externalRef) => {
    const { onPress, disabled, checked, label, color, value } = props, otherProps = __rest(props, ["onPress", "disabled", "checked", "label", "color", "value"]);
    const inputRef = useRef(null);
    const { isFocusVisible, focusProps } = useFocusRing();
    const { pressProps, isPressed } = usePress({ onPress, isDisabled: disabled });
    const { isHovered, hoverProps } = useHover({ isDisabled: disabled });
    const getScaleInProps = transitions.useScaleIn();
    const getScaleProps = transitions.useScale();
    const { name, selectedValue, onChange } = useContext(RadioGroupContext);
    const isChecked = checked ||
        (Array.isArray(value)
            ? value.every((i) => i === selectedValue)
            : selectedValue === value && typeof value !== 'undefined' && value !== null);
    return (React.createElement("label", { className: modules_331aea95.Radio },
        React.createElement("input", Object.assign({ type: "radio", disabled: disabled, "aria-disabled": disabled, tabIndex: 0, value: value, checked: isChecked }, mergeProps({ name, onChange }, pressProps, focusProps, hoverProps, otherProps), { ref: composeRefs(inputRef, externalRef) })),
        React.createElement("span", { className: clsx([
                modules_331aea95.radiomark,
                modules_331aea95[`color_${color}`],
                disabled && modules_331aea95.disabled,
                isChecked && modules_331aea95.checked,
                isFocusVisible && modules_331aea95.focusVisible,
                isPressed && modules_331aea95.active,
                isHovered && modules_331aea95.hover,
            ]), "aria-hidden": "true" },
            React.createElement(AnimatePresence, null, isFocusVisible && (React.createElement(motion.span, Object.assign({ "aria-hidden": "true", className: modules_331aea95.focusRing }, getScaleInProps(1.2))))),
            React.createElement(AnimatePresence, { initial: false }, isChecked && (React.createElement(motion.span, Object.assign({ className: modules_331aea95.radiomarkIcon }, getScaleProps(0.7), { key: 0 }),
                React.createElement("span", null))))),
        label && (React.createElement(React.Fragment, null,
            React.createElement(Spacer, { size: 8, inline: true }),
            React.createElement("span", null, label)))));
});

export { Radio, RadioGroup };
//# sourceMappingURL=radio.js.map
