import { __rest } from '../../../_virtual/_tslib.js';
import React, { useRef, useState, useEffect } from 'react';
import composeRefs from '@seznam/compose-react-refs';
import { useClipboard } from 'usable-react';
import { usePress } from 'react-aria';
import { TextField } from './text-field.js';
import { Icon } from '../../icons/icon-base.js';
import { Copy } from '../../icons/monochrome/copy.js';
import 'framer-motion';
import '../call-to-action/call-to-action.js';
import { mergeProps } from '../../../libs/merge-props.js';
import 'clsx';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import '@react-aria/ssr';
import 'blueimp-md5';
import 'color';
import '@artsy/fresnel';
import '../../theme-provider/theme-provider.js';
import '../../theme-provider/theme-head.js';
import { AutoResizingDiv } from '../../layout/auto-resizing-div.js';
import 'react-dom';
import 'react-popper';
import 'react-stately';
import '../../../libs/collections.js';
import { TextButton } from '../text-button/text-button.js';
import '../radio/radio.js';
import '../skeleton/skeleton.js';
import '../typography/typography.js';
import '../button-v2/button-v2.js';
import 'ua-parser-js';
import { HoverActivatedTooltip } from '../../feedback/tooltip/hover-activated-tooltip.js';
import '../../feedback/announcer.js';

const CopyableTextField = /* @__PURE__ */ forwardRefWrapper('CopyableTextField', (props, externalRef) => {
    const inputRef = useRef(null);
    const [copyTooltipText, setCopyTooltipText] = useState('Copy');
    const { value, defaultValue, onCopy, size } = props, otherProps = __rest(props, ["value", "defaultValue", "onCopy", "size"]);
    useEffect(() => {
        if (copyTooltipText !== 'Copy') {
            const timeout = setTimeout(() => setCopyTooltipText('Copy'), 1000);
            return () => clearTimeout(timeout);
        }
        return undefined;
    }, [copyTooltipText]);
    const { copy, ref: clipboardRef } = useClipboard(() => {
        setCopyTooltipText('Copied!');
        if (onCopy)
            onCopy();
    });
    const { pressProps } = usePress({ onPress: copy });
    const suffix = (React.createElement(HoverActivatedTooltip, { portalize: true, placement: "top" },
        React.createElement(HoverActivatedTooltip.Anchor, null,
            React.createElement(TextButton, Object.assign({ size: size === 'lg' ? 'md' : size }, mergeProps(pressProps)),
                React.createElement(Icon, { type: Copy, style: { lineHeight: 0 } }))),
        React.createElement(HoverActivatedTooltip.Content, null,
            React.createElement(AutoResizingDiv, null,
                React.createElement("p", { style: { textAlign: 'center' } }, copyTooltipText)))));
    return (React.createElement(TextField, Object.assign({ value: value, defaultValue: defaultValue, suffix: suffix, size: size }, otherProps, { ref: composeRefs(inputRef, externalRef, clipboardRef) })));
});

export { CopyableTextField };
//# sourceMappingURL=copyable-text-field.js.map
