import { __rest } from '../../../_virtual/_tslib.js';
import composeRefs from '@seznam/compose-react-refs';
import { AnimatePresence, motion } from 'framer-motion';
import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useFocus, useFocusWithin, useFocusVisible, useFocusRing } from 'react-aria';
import { transitions } from '../../../hooks/transitions.js';
import clsx from 'clsx';
import { forwardRefWrapper } from '../../../libs/forward-ref-wrapper.js';
import { mergeProps } from '../../../libs/merge-props.js';
import { Icon } from '../../icons/icon-base.js';
import { AsteriskBold } from '../../icons/monochrome/asterisk-bold.js';
import { Flex } from '../../layout/flexbox/flexbox.js';
import { Outset } from '../../layout/outset/outset.js';
import '@react-aria/ssr';
import 'blueimp-md5';
import 'color';
import '@artsy/fresnel';
import { useTheme } from '../../theme-provider/use-theme.js';
import '../../theme-provider/theme-provider.js';
import '../../theme-provider/theme-head.js';
import 'usable-react';
import 'watch-resize';
import 'react-dom';
import 'react-popper';
import modules_2db10216 from './text-field.less.js';

const TextFieldRender = /* @__PURE__ */ forwardRefWrapper('TextField', { size: 'md' }, (props, externalRef) => {
    const { id, required, disabled, label, placeholder, errorMessage, validateOnBlur, size, prefix, suffix, addonBefore, addonAfter } = props, otherProps = __rest(props, ["id", "required", "disabled", "label", "placeholder", "errorMessage", "validateOnBlur", "size", "prefix", "suffix", "addonBefore", "addonAfter"]);
    const [hasError, setHasError] = useState(!!errorMessage);
    useEffect(() => {
        setHasError(!!errorMessage);
    }, [errorMessage]);
    const onBlur = useCallback((e) => {
        if (validateOnBlur) {
            const valid = e.target.checkValidity();
            setHasError(!valid || !!errorMessage);
        }
    }, [errorMessage]);
    // Focus
    const [isFocused, onFocusChange] = useState(false);
    const [isFocusedWithinAddonBefore, onFocusWithinAddonBeforeChange] = useState(false);
    const [isFocusedWithinAddonAfter, onFocusWithinAddonAfterChange] = useState(false);
    const { focusProps } = useFocus({ isDisabled: disabled, onBlur, onFocusChange });
    const { focusWithinProps: focusWithinAddonBeforeProps } = useFocusWithin({
        isDisabled: disabled,
        onFocusWithinChange: onFocusWithinAddonBeforeChange,
    });
    const { focusWithinProps: focusWithinAddonAfterProps } = useFocusWithin({
        isDisabled: disabled,
        onFocusWithinChange: onFocusWithinAddonAfterChange,
    });
    const { isFocusVisible } = useFocusVisible({ isTextInput: true });
    const inputRef = useRef(null);
    const focusOnInput = useCallback(() => {
        if (inputRef.current)
            inputRef.current.focus();
    }, [inputRef]);
    const getScaleProps = transitions.useScale();
    const theme = useTheme();
    return (React.createElement(Flex.Column, null,
        label && (React.createElement(Outset, { bottom: 8 },
            React.createElement("label", { htmlFor: id, className: clsx([modules_2db10216.TextFieldLabel, modules_2db10216[`size_${size}`]]) },
                React.createElement(Flex.Row, { alignItems: "center" },
                    React.createElement(Outset, { right: 3, trim: "horizontal" },
                        React.createElement("span", null, label),
                        required && React.createElement(Icon, { size: 10, color: theme.hex.error.darker, type: AsteriskBold })))))),
        React.createElement(Flex.Row, { alignItems: "center", onClick: focusOnInput, className: clsx([
                modules_2db10216.TextField,
                disabled && modules_2db10216.disabled,
                isFocused && modules_2db10216.focus,
                (isFocusedWithinAddonBefore || isFocusedWithinAddonAfter) && isFocusVisible && modules_2db10216.focusWithin,
                isFocusedWithinAddonBefore && isFocusVisible && modules_2db10216.focusWithinAddonBefore,
                isFocusedWithinAddonAfter && isFocusVisible && modules_2db10216.focusWithinAddonAfter,
                hasError && modules_2db10216.hasError,
            ]) },
            addonBefore && (React.createElement(Flex.Item, Object.assign({}, focusWithinAddonBeforeProps, { shrink: 0, alignSelf: "stretch", className: clsx(modules_2db10216.addon, modules_2db10216.before) }), addonBefore)),
            React.createElement(Flex.Row, { grow: 1, alignItems: "center", className: clsx(modules_2db10216.paddingContainer, modules_2db10216[`size_${size}`]) },
                React.createElement(AnimatePresence, { initial: false, mode: "wait" }, prefix && (React.createElement(motion.div, Object.assign({ className: modules_2db10216.prefix }, getScaleProps(0.7), { key: 0 }), prefix))),
                React.createElement("input", Object.assign({}, mergeProps({
                    id,
                    tabIndex: disabled ? -1 : 0,
                    disabled,
                    'aria-label': !label && !!placeholder ? placeholder : undefined,
                    placeholder,
                }, focusProps, otherProps), { ref: composeRefs(inputRef, externalRef) })),
                React.createElement(AnimatePresence, { initial: false, mode: "wait" }, suffix && !hasError && (React.createElement(motion.div, Object.assign({ className: modules_2db10216.suffix }, getScaleProps(0.7), { key: 0 }), suffix)))),
            addonAfter && (React.createElement(Flex.Item, Object.assign({}, focusWithinAddonAfterProps, { shrink: 0, alignSelf: "stretch", className: clsx(modules_2db10216.addon, modules_2db10216.after) }), addonAfter))),
        errorMessage && (React.createElement(Outset, { top: 8, left: 0 },
            React.createElement("span", { className: clsx([modules_2db10216.TextFieldErrorMessage, modules_2db10216[`size_${size}`]]) }, errorMessage)))));
});
const TextFieldAddonButton = /* @__PURE__ */ forwardRefWrapper('TextField.AddonButton', (props, externalRef) => {
    const { disabled, autoFocus, children } = props, otherProps = __rest(props, ["disabled", "autoFocus", "children"]);
    const { isFocusVisible, focusProps } = useFocusRing({ autoFocus });
    return (React.createElement(Flex.Row, { vertical: "center", horizontal: "center", className: modules_2db10216.AddonButton },
        React.createElement("button", Object.assign({}, mergeProps({
            className: clsx(disabled && modules_2db10216.disabled, isFocusVisible && modules_2db10216.focus),
            disabled,
            autoFocus,
        }, focusProps, otherProps), { ref: externalRef }), children)));
});
const TextField = /* @__PURE__ */ Object.assign(TextFieldRender, {
    AddonButton: TextFieldAddonButton,
});

export { TextField };
//# sourceMappingURL=text-field.js.map
