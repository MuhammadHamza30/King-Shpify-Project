import { __rest } from '../../../_virtual/_tslib.js';
import { AnimatePresence, motion } from 'framer-motion';
import React, { useMemo } from 'react';
import { useFocusRing, usePress } from 'react-aria';
import { transitions } from '../../../hooks/transitions.js';
import clsx from 'clsx';
import { createGenericForwardRefsFactory } from '../../../libs/generic-forward-refs.js';
import { mergeProps } from '../../../libs/merge-props.js';
import { Icon, IconColorProvider } from '../../icons/icon-base.js';
import '@seznam/compose-react-refs';
import '@react-aria/ssr';
import { InverseThemeSemantics } from '../../theme-provider/inverse-theme-semantics.js';
import '@artsy/fresnel';
import '../../theme-provider/theme-provider.js';
import '../../theme-provider/theme-head.js';
import { useTheme } from '../../theme-provider/use-theme.js';
import 'usable-react';
import 'watch-resize';
import 'react-dom';
import 'react-popper';
import { Spacer } from '../../layout/spacer.js';
import modules_7956c93f from './call-to-action.less.js';

/**
 * Determines a _default_ color for icons nested in a `<CallToAction>`.
 */
function useIconColor(baseColor, inverseSemantics, outline) {
    const theme = useTheme({ inverseSemantics });
    return useMemo(() => {
        let iconBaseColor;
        switch (baseColor) {
            case 'primary':
                iconBaseColor = outline ? 'tertiary' : 'secondary';
                break;
            case 'secondary':
                iconBaseColor = outline ? 'secondary' : 'tertiary';
                break;
            case 'tertiary':
                iconBaseColor = outline ? 'tertiary' : 'secondary';
                break;
            case 'error':
                iconBaseColor = outline ? 'error' : 'secondary';
                break;
            case 'warning':
                iconBaseColor = outline ? 'warning' : 'secondary';
                break;
            case 'success':
                iconBaseColor = outline ? 'success' : 'secondary';
                break;
            default:
                iconBaseColor = undefined;
        }
        return iconBaseColor ? theme.hex[iconBaseColor].base : undefined;
    }, [theme.key, baseColor, outline]);
}
const createCallToActionComponents = /* @__PURE__ */ createGenericForwardRefsFactory(['button', 'a']);
const CallToActionComponents = /* @__PURE__ */ createCallToActionComponents('CallToAction', { color: 'primary', size: 'md' }, (props, externalRef) => {
    const { children, onPress, className, disabled, outline, color, size, leadingIcon, trailingIcon, component } = props, otherProps = __rest(props, ["children", "onPress", "className", "disabled", "outline", "color", "size", "leadingIcon", "trailingIcon", "component"]);
    const { isFocusVisible, focusProps } = useFocusRing();
    const { pressProps, isPressed } = usePress({ onPress, isDisabled: disabled });
    const getScaleProps = transitions.useScaleIn();
    const inverseSemantics = (color === 'secondary' && outline) || (color === 'tertiary' && !outline);
    const iconColor = useIconColor(color, inverseSemantics, outline);
    const content = (React.createElement(React.Fragment, null,
        React.createElement(AnimatePresence, null, isFocusVisible && React.createElement(motion.span, Object.assign({ "aria-hidden": "true", className: modules_7956c93f.focusRing }, getScaleProps(1.08)))),
        leadingIcon && (React.createElement(React.Fragment, null,
            React.createElement(Icon, { size: size === 'sm' ? 20 : 24, type: leadingIcon }),
            React.createElement(Spacer, { size: 8 }))),
        React.createElement("span", { className: modules_7956c93f.buttonLabel }, children),
        trailingIcon && (React.createElement(React.Fragment, null,
            React.createElement(Spacer, { size: 8 }),
            React.createElement(Icon, { size: size === 'sm' ? 20 : 24, type: trailingIcon })))));
    return (React.createElement(IconColorProvider, { colorA: iconColor },
        React.createElement(InverseThemeSemantics, { active: inverseSemantics }, React.createElement(component, Object.assign(Object.assign({ className: clsx([
                className,
                modules_7956c93f.CallToAction,
                modules_7956c93f[`size_${size}`],
                modules_7956c93f[`color_${color}`],
                disabled && modules_7956c93f.disabled,
                outline && modules_7956c93f.outline,
                isPressed && modules_7956c93f.active,
            ]), disabled, 'aria-disabled': disabled }, mergeProps(pressProps, focusProps, otherProps)), { ref: externalRef }), content))));
});
const CallToAction = /* @__PURE__ */ Object.assign(CallToActionComponents.button, CallToActionComponents);

export { CallToAction };
//# sourceMappingURL=call-to-action.js.map
