{"version":3,"file":"exceptions.js","sources":["../../../src/libs/exceptions.ts"],"sourcesContent":["/**\n * Creates an `Error` with a consistent message format.\n */\nexport function createError(label: string, message: string): UIError<'ERROR'>;\nexport function createError(component: React.FC<any>, message: string): UIError<'ERROR'>;\nexport function createError(source: string | React.FC<any>, message: string): UIError<'ERROR'>;\nexport function createError(source: string | React.FC<any>, message: string): UIError<'ERROR'> {\n  return createErrorWithCode('ERROR', source, message);\n}\n\n/**\n * Creates an `Error` with a consistent message format and\n * attaches an error code to the resulting `Error` object.\n */\nexport function createErrorWithCode<Code extends string>(code: Code, label: string, message: string): UIError<Code>;\n\nexport function createErrorWithCode<Code extends string>(\n  code: Code,\n  component: React.FC<any>,\n  message: string,\n): UIError<Code>;\n\nexport function createErrorWithCode<Code extends string>(\n  code: Code,\n  source: string | React.FC<any>,\n  message: string,\n): UIError<Code>;\n\nexport function createErrorWithCode<Code extends string>(\n  code: Code,\n  source: string | React.FC<any>,\n  message: string,\n): UIError<Code> {\n  return new (UIError as any)(code, source, message);\n}\n\n/**\n * The base error type which all `@magiclabs/ui` exceptions derive from.\n */\nexport abstract class UIError<Code extends string = string> extends Error {\n  __proto__ = Error;\n\n  public code: `@magiclabs/ui.${Uppercase<Code>}`;\n\n  constructor(code: Code, source: string | React.FC<any>, message: string) {\n    super();\n\n    // eslint-disable-next-line no-nested-ternary\n    const label = typeof source === 'string' ? source : source.displayName ? `<${source.displayName}>` : undefined;\n\n    this.code = `@magiclabs/ui.${code.toUpperCase() as Uppercase<Code>}` as const;\n    this.message = label ? `[@magiclabs/ui ❯ ${label}] ${message}` : `[@magiclabs/ui] ${message}`;\n\n    Object.setPrototypeOf(this, UIError.prototype);\n  }\n}\n\n/**\n * Logs a warning message to the console using a consistent message format.\n */\nexport function logWarning(label: string, message: string): void;\nexport function logWarning(component: React.FC<any>, message: string): void;\nexport function logWarning(source: string | React.FC<any>, message: string): void;\nexport function logWarning(source: string | React.FC<any>, message: string): void {\n  // eslint-disable-next-line no-nested-ternary\n  const label = typeof source === 'string' ? source : source.displayName ? `<${source.displayName}>` : undefined;\n  console.warn(label ? `[@magiclabs/ui ❯ ${label}] ${message}` : `[@magiclabs/ui] ${message}`);\n}\n"],"names":[],"mappings":";;;;SA4BgB,mBAAmB,CACjC,IAAU,EACV,MAA8B,EAC9B,OAAe,EAAA;IAEf,OAAO,IAAK,OAAe,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AACrD,CAAC;AAED;;AAEG;AACG,MAAgB,OAAsC,SAAQ,KAAK,CAAA;AAKvE,IAAA,WAAA,CAAY,IAAU,EAAE,MAA8B,EAAE,OAAe,EAAA;AACrE,QAAA,KAAK,EAAE,CAAC;QALV,IAAS,CAAA,SAAA,GAAG,KAAK,CAAC;;AAQhB,QAAA,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,CAAA,CAAA,EAAI,MAAM,CAAC,WAAW,CAAA,CAAA,CAAG,GAAG,SAAS,CAAC;QAE/G,IAAI,CAAC,IAAI,GAAG,CAAA,cAAA,EAAiB,IAAI,CAAC,WAAW,EAAqB,CAAA,CAAW,CAAC;AAC9E,QAAA,IAAI,CAAC,OAAO,GAAG,KAAK,GAAG,CAAoB,iBAAA,EAAA,KAAK,CAAK,EAAA,EAAA,OAAO,EAAE,GAAG,CAAmB,gBAAA,EAAA,OAAO,EAAE,CAAC;QAE9F,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;KAChD;AACF,CAAA;AAQe,SAAA,UAAU,CAAC,MAA8B,EAAE,OAAe,EAAA;;AAExE,IAAA,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,CAAA,CAAA,EAAI,MAAM,CAAC,WAAW,CAAA,CAAA,CAAG,GAAG,SAAS,CAAC;AAC/G,IAAA,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,CAAoB,iBAAA,EAAA,KAAK,KAAK,OAAO,CAAA,CAAE,GAAG,mBAAmB,OAAO,CAAA,CAAE,CAAC,CAAC;AAC/F;;;;;;"}