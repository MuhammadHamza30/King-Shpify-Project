'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var framerMotion = require('framer-motion');
var React = require('react');
var reactAria = require('react-aria');
var reactStately = require('react-stately');
var clsx = require('clsx');
var collections = require('../../../libs/collections.js');
var genericComponent = require('../../../libs/generic-component.js');
var mergeProps = require('../../../libs/merge-props.js');
var iconBase = require('../../icons/icon-base.js');
var asteriskBold = require('../../icons/monochrome/asterisk-bold.js');
var caretDown = require('../../icons/monochrome/caret-down.js');
var caretUp = require('../../icons/monochrome/caret-up.js');
var remove = require('../../icons/monochrome/remove.js');
var search = require('../../icons/monochrome/search.js');
var flexbox = require('../../layout/flexbox/flexbox.js');
var outset = require('../../layout/outset/outset.js');
require('@seznam/compose-react-refs');
require('@react-aria/ssr');
require('blueimp-md5');
require('color');
require('@artsy/fresnel');
var useTheme = require('../../theme-provider/use-theme.js');
require('../../theme-provider/theme-provider.js');
require('../../theme-provider/theme-head.js');
require('usable-react');
require('watch-resize');
require('react-dom');
require('react-popper');
var listBox = require('../list-box/list-box.js');
var textField = require('../text-field/text-field.js');
var comboBox = require('./combo-box.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

function ComboBoxRender(props) {
    const { filter: customFilter, size = 'md', showMenuButton, showSearchIcon, menuMinHeight, menuMaxHeight, inputValue, defaultInputValue, 
    /**
     * If true, the input contents will be selected on focus.
     */
    autoSelect } = props, propsWithoutCustom = _tslib.__rest(props, ["filter", "size", "showMenuButton", "showSearchIcon", "menuMinHeight", "menuMaxHeight", "inputValue", "defaultInputValue", "autoSelect"]);
    const { items, label, isRequired } = props;
    const validCollectionChildren = collections.validateCollection(propsWithoutCustom, GenericComboBox);
    // --- Advanced use-case: custom `items` filtering
    const [filterValue, setFilterValue] = React.useState(defaultInputValue);
    const filteredItems = React.useMemo(() => {
        if (items && customFilter) {
            return Array.from(items)
                .filter(Boolean)
                .filter((item) => {
                return customFilter(item, filterValue !== null && filterValue !== void 0 ? filterValue : '');
            });
        }
        return undefined;
    }, [items, customFilter, filterValue]);
    // --- State, props, and refs containing accessibility metadata for use with the combo-box
    const inputRef = React.useRef(null);
    const listBoxRef = React.useRef(null);
    const popoverRef = React.useRef(document.createElement('div'));
    const buttonRef = React.useRef(null);
    const state = reactStately.useComboBoxState(Object.assign(Object.assign({}, mergeProps.mergeProps(propsWithoutCustom, {
        inputValue: inputValue !== null && inputValue !== void 0 ? inputValue : filterValue,
        onInputChange: setFilterValue,
    })), { items: filteredItems || items, children: validCollectionChildren, defaultFilter: reactAria.useFilter({ sensitivity: 'base' }).contains }));
    const { buttonProps: triggerProps, inputProps, listBoxProps, labelProps, } = reactAria.useComboBox(Object.assign(Object.assign({}, propsWithoutCustom), { inputRef,
        listBoxRef,
        popoverRef, buttonRef: showMenuButton ? buttonRef : undefined }), state);
    // If the `autoSelect` prop is set, we'll select the input contents whenever
    // the combobox gets focus.
    React.useEffect(() => {
        var _a;
        if (state.isFocused && autoSelect) {
            (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.select();
        }
    }, [state.isFocused, autoSelect]);
    // Props for an menu trigger button; currently unused...
    const { buttonProps } = reactAria.useButton(triggerProps, buttonRef);
    // --- Manage listbox overlay state
    const { overlayProps } = reactAria.useOverlay({
        isOpen: state.isOpen,
        onClose: state.close,
        shouldCloseOnBlur: true,
        isDismissable: false,
    }, popoverRef);
    // --- Pass the combo-box state and ref to the `ListBox` via React context
    const listBoxCtx = React.useMemo(() => ({
        state,
        ref: listBoxRef,
    }), [state, listBoxRef]);
    const theme = useTheme.useTheme();
    return (React__default["default"].createElement("div", { className: comboBox["default"].ComboBox },
        label && (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement("label", Object.assign({ className: clsx__default["default"]([comboBox["default"].ComboBoxLabel, comboBox["default"][`size_${size}`]]) }, labelProps),
                React__default["default"].createElement(flexbox.Flex.Row, { alignItems: "center" },
                    React__default["default"].createElement(outset.Outset, { right: 3, trim: "horizontal" },
                        React__default["default"].createElement("span", null, label),
                        isRequired && React__default["default"].createElement(iconBase.Icon, { size: 10, color: theme.hex.primary.base, type: asteriskBold.AsteriskBold })))))),
        React__default["default"].createElement(textField.TextField, Object.assign({}, mergeProps.mergeProps(inputProps), { size: size, prefix: !!showSearchIcon && React__default["default"].createElement(iconBase.Icon, { style: { opacity: 0.5 }, size: 14, type: search.Search }), suffix: !!state.inputValue.length && React__default["default"].createElement(ClearInputButton, { state: state, inputRef: inputRef }), addonAfter: showMenuButton && (React__default["default"].createElement(textField.TextField.AddonButton, Object.assign({}, buttonProps, { ref: buttonRef }),
                React__default["default"].createElement(iconBase.Icon, { size: 14, type: state.isOpen ? caretUp.CaretUp : caretDown.CaretDown }))), ref: inputRef })),
        React__default["default"].createElement(framerMotion.AnimatePresence, null, state.isOpen && (React__default["default"].createElement(reactAria.FocusScope, { restoreFocus: true },
            React__default["default"].createElement("div", Object.assign({ className: comboBox["default"].listboxContainer }, overlayProps, { ref: popoverRef }),
                React__default["default"].createElement(listBox.ListBoxContext.Provider, { value: listBoxCtx },
                    React__default["default"].createElement(listBox.ListBox, Object.assign({}, listBoxProps, { minHeight: menuMinHeight, maxHeight: menuMaxHeight }))),
                React__default["default"].createElement(reactAria.DismissButton, { onDismiss: state.close })))))));
}
const ClearInputButton = (props) => {
    const { state, inputRef } = props;
    const searchProps = {
        // label doesn't matter because we use `aria-hidden=true`;
        // just need this to silence the warning from `react-aria`
        'aria-label': 'n/a',
        value: state.inputValue,
        onChange: (v) => state.setInputValue(v),
    };
    const searchState = reactStately.useSearchFieldState(searchProps);
    const { clearButtonProps } = reactAria.useSearchField(searchProps, searchState, inputRef);
    const clearButtonRef = React__default["default"].useRef(null);
    const { buttonProps } = reactAria.useButton(clearButtonProps, clearButtonRef);
    return (React__default["default"].createElement("button", Object.assign({}, mergeProps.mergeProps({ className: comboBox["default"].ClearInputButton }, buttonProps), { tabIndex: -1, "aria-hidden": "true" }),
        React__default["default"].createElement(iconBase.Icon, { size: 14, type: remove.Remove })));
};
const GenericComboBox = /* @__PURE__ */ genericComponent.createGenericComponent('ComboBox', ComboBoxRender);
const ComboBox = /* @__PURE__ */ Object.assign(GenericComboBox, {
    useOption: listBox.useOption,
});

exports.ComboBox = ComboBox;
//# sourceMappingURL=combo-box.js.map
