'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var framerMotion = require('framer-motion');
var React = require('react');
var reactAria = require('react-aria');
var transitions = require('../../../hooks/transitions.js');
var clsx = require('clsx');
var genericForwardRefs = require('../../../libs/generic-forward-refs.js');
var mergeProps = require('../../../libs/merge-props.js');
var iconBase = require('../../icons/icon-base.js');
require('@seznam/compose-react-refs');
require('@react-aria/ssr');
var inverseThemeSemantics = require('../../theme-provider/inverse-theme-semantics.js');
require('@artsy/fresnel');
require('../../theme-provider/theme-provider.js');
require('../../theme-provider/theme-head.js');
var useTheme = require('../../theme-provider/use-theme.js');
require('usable-react');
require('watch-resize');
require('react-dom');
require('react-popper');
var spacer = require('../../layout/spacer.js');
var callToAction = require('./call-to-action.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

/**
 * Determines a _default_ color for icons nested in a `<CallToAction>`.
 */
function useIconColor(baseColor, inverseSemantics, outline) {
    const theme = useTheme.useTheme({ inverseSemantics });
    return React.useMemo(() => {
        let iconBaseColor;
        switch (baseColor) {
            case 'primary':
                iconBaseColor = outline ? 'tertiary' : 'secondary';
                break;
            case 'secondary':
                iconBaseColor = outline ? 'secondary' : 'tertiary';
                break;
            case 'tertiary':
                iconBaseColor = outline ? 'tertiary' : 'secondary';
                break;
            case 'error':
                iconBaseColor = outline ? 'error' : 'secondary';
                break;
            case 'warning':
                iconBaseColor = outline ? 'warning' : 'secondary';
                break;
            case 'success':
                iconBaseColor = outline ? 'success' : 'secondary';
                break;
            default:
                iconBaseColor = undefined;
        }
        return iconBaseColor ? theme.hex[iconBaseColor].base : undefined;
    }, [theme.key, baseColor, outline]);
}
const createCallToActionComponents = /* @__PURE__ */ genericForwardRefs.createGenericForwardRefsFactory(['button', 'a']);
const CallToActionComponents = /* @__PURE__ */ createCallToActionComponents('CallToAction', { color: 'primary', size: 'md' }, (props, externalRef) => {
    const { children, onPress, className, disabled, outline, color, size, leadingIcon, trailingIcon, component } = props, otherProps = _tslib.__rest(props, ["children", "onPress", "className", "disabled", "outline", "color", "size", "leadingIcon", "trailingIcon", "component"]);
    const { isFocusVisible, focusProps } = reactAria.useFocusRing();
    const { pressProps, isPressed } = reactAria.usePress({ onPress, isDisabled: disabled });
    const getScaleProps = transitions.transitions.useScaleIn();
    const inverseSemantics = (color === 'secondary' && outline) || (color === 'tertiary' && !outline);
    const iconColor = useIconColor(color, inverseSemantics, outline);
    const content = (React__default["default"].createElement(React__default["default"].Fragment, null,
        React__default["default"].createElement(framerMotion.AnimatePresence, null, isFocusVisible && React__default["default"].createElement(framerMotion.motion.span, Object.assign({ "aria-hidden": "true", className: callToAction["default"].focusRing }, getScaleProps(1.08)))),
        leadingIcon && (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(iconBase.Icon, { size: size === 'sm' ? 20 : 24, type: leadingIcon }),
            React__default["default"].createElement(spacer.Spacer, { size: 8 }))),
        React__default["default"].createElement("span", { className: callToAction["default"].buttonLabel }, children),
        trailingIcon && (React__default["default"].createElement(React__default["default"].Fragment, null,
            React__default["default"].createElement(spacer.Spacer, { size: 8 }),
            React__default["default"].createElement(iconBase.Icon, { size: size === 'sm' ? 20 : 24, type: trailingIcon })))));
    return (React__default["default"].createElement(iconBase.IconColorProvider, { colorA: iconColor },
        React__default["default"].createElement(inverseThemeSemantics.InverseThemeSemantics, { active: inverseSemantics }, React__default["default"].createElement(component, Object.assign(Object.assign({ className: clsx__default["default"]([
                className,
                callToAction["default"].CallToAction,
                callToAction["default"][`size_${size}`],
                callToAction["default"][`color_${color}`],
                disabled && callToAction["default"].disabled,
                outline && callToAction["default"].outline,
                isPressed && callToAction["default"].active,
            ]), disabled, 'aria-disabled': disabled }, mergeProps.mergeProps(pressProps, focusProps, otherProps)), { ref: externalRef }), content))));
});
const CallToAction = /* @__PURE__ */ Object.assign(CallToActionComponents.button, CallToActionComponents);

exports.CallToAction = CallToAction;
//# sourceMappingURL=call-to-action.js.map
