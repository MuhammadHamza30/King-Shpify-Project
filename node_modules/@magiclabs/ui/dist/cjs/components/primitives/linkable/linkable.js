'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');
var reactAria = require('react-aria');
var mergeProps = require('../../../libs/merge-props.js');
var clsx = require('clsx');
var forwardRefWrapper = require('../../../libs/forward-ref-wrapper.js');
var linkable = require('./linkable.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

/* eslint-disable jsx-a11y/no-noninteractive-tabindex */
const Linkable = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Linkable', (props, externalRef) => {
    const { children, onPress, ambientUnderline, className } = props, otherProps = _tslib.__rest(props, ["children", "onPress", "ambientUnderline", "className"]);
    const isTextChild = typeof children === 'string' || typeof children === 'number';
    const { pressProps } = reactAria.usePress({ onPress });
    return (React__default["default"].createElement("span", Object.assign({ className: clsx__default["default"]([
            className,
            linkable["default"].Linkable,
            ambientUnderline && linkable["default"].ambientUnderline,
            isTextChild && linkable["default"].isTextChild,
        ]), role: isTextChild ? 'link' : undefined, tabIndex: isTextChild ? 0 : -1 }, mergeProps.mergeProps(onPress ? pressProps : {}, otherProps), { ref: externalRef }), children));
});

exports.Linkable = Linkable;
//# sourceMappingURL=linkable.js.map
