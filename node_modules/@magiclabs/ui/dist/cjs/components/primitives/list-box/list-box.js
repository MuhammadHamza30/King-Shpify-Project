'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var composeRefs = require('@seznam/compose-react-refs');
var framerMotion = require('framer-motion');
var React = require('react');
var reactAria = require('react-aria');
var reactStately = require('react-stately');
var transitions = require('../../../hooks/transitions.js');
var clsx = require('clsx');
var collections = require('../../../libs/collections.js');
var exceptions = require('../../../libs/exceptions.js');
var genericComponent = require('../../../libs/generic-component.js');
var mergeProps = require('../../../libs/merge-props.js');
var listBox = require('./list-box.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var composeRefs__default = /*#__PURE__*/_interopDefaultLegacy(composeRefs);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

const listboxTransition = /* @__PURE__ */ transitions.createFramerTransition().withVariants({
    initial: {
        opacity: 0,
        scale: 0.96,
        rotateX: '-7deg',
        rotateY: '0deg',
        transformOrigin: 'top center',
        transition: { type: 'tween', ease: 'easeInOut', duration: 0.2 },
        perspective: '500px',
    },
    animate: {
        opacity: 1,
        scale: 1,
        rotateX: '0deg',
        rotateY: '0deg',
        transition: { type: 'tween', ease: 'easeInOut', duration: 0.2 },
        perspective: '500px',
    },
});
const ListBoxContext = /* @__PURE__ */ React.createContext(null);
function ListBoxRender(props) {
    var _a;
    const { label, minHeight, maxHeight } = props;
    // Validate props & children
    if (!label && !props['aria-label'] && !props['aria-labelledby']) {
        throw exceptions.createErrorWithCode('LIST_BOX_MISSING_ACCESSIBILTY_LABEL', GenericListBox, 'If you do not provide a visible `label`, you must specify an `aria-label` or `aria-labelledby` attribute for accessibility');
    }
    const validCollectionChildren = collections.validateCollection(props, GenericListBox);
    // Create listbox state & refs
    const { state: contextualState, ref: contextualRef } = (_a = React.useContext(ListBoxContext)) !== null && _a !== void 0 ? _a : {};
    const listboxRef = React.useRef(null);
    const state = contextualState !== null && contextualState !== void 0 ? contextualState : reactStately.useListState(Object.assign(Object.assign({}, props), { children: validCollectionChildren }));
    const { listBoxProps, labelProps } = reactAria.useListBox(props, state, listboxRef);
    // listbox animation
    const getListBoxTransitionProps = listboxTransition.use({
        initial: 'initial',
        animate: 'animate',
        exit: 'initial',
    });
    return (React__default["default"].createElement(framerMotion.motion.div, Object.assign({ className: listBox["default"].ListBox }, getListBoxTransitionProps()),
        label && React__default["default"].createElement("div", Object.assign({}, mergeProps.mergeProps({ className: listBox["default"].label }, labelProps)), label),
        React__default["default"].createElement("ul", Object.assign({}, listBoxProps, { style: { minHeight, maxHeight }, ref: composeRefs__default["default"](listboxRef, contextualRef) }), [...state.collection].map((item) => (React__default["default"].createElement(Option, { key: item.key, item: item, state: state }))))));
}
const OptionContext = /* @__PURE__ */ React.createContext({ isFocused: false, isSelected: false, isPressed: false, isDisabled: false });
function useOption() {
    return React.useContext(OptionContext);
}
function Option(props) {
    const { item, state } = props;
    // Derive option state and create refs
    const ref = React__default["default"].useRef(null);
    const { optionProps, isFocused, isSelected, isPressed, isDisabled } = reactAria.useOption({ key: item.key }, state, ref);
    const { isFocusVisible, focusProps } = reactAria.useFocusRing();
    // Create a context wrapping items with critical metadata
    const ctx = React.useMemo(() => ({ isFocused, isSelected, isPressed, isDisabled }), [isFocused, isSelected, isPressed, isDisabled]);
    React.useEffect(() => {
        var _a;
        if (isFocused) {
            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'nearest' });
        }
    }, [isFocused]);
    const isInListBoxContext = !!React.useContext(ListBoxContext);
    return (React__default["default"].createElement(OptionContext.Provider, { value: ctx },
        React__default["default"].createElement("li", Object.assign({}, mergeProps.mergeProps({
            className: clsx__default["default"](listBox["default"].Option, isSelected && listBox["default"].selected, isFocused && (isFocusVisible || isInListBoxContext) && listBox["default"].focused),
        }, optionProps, focusProps), { ref: ref }), item.rendered)));
}
const GenericListBox = /* @__PURE__ */ genericComponent.createGenericComponent('ListBox', ListBoxRender);
const ListBox = /* @__PURE__ */ Object.assign(GenericListBox, { useOption });

exports.ListBox = ListBox;
exports.ListBoxContext = ListBoxContext;
exports.useOption = useOption;
//# sourceMappingURL=list-box.js.map
