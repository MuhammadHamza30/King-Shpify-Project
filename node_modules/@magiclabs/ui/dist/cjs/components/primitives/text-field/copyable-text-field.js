'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');
var composeRefs = require('@seznam/compose-react-refs');
var usableReact = require('usable-react');
var reactAria = require('react-aria');
var textField = require('./text-field.js');
var iconBase = require('../../icons/icon-base.js');
var copy = require('../../icons/monochrome/copy.js');
require('framer-motion');
require('../call-to-action/call-to-action.js');
var mergeProps = require('../../../libs/merge-props.js');
require('clsx');
var forwardRefWrapper = require('../../../libs/forward-ref-wrapper.js');
require('@react-aria/ssr');
require('blueimp-md5');
require('color');
require('@artsy/fresnel');
require('../../theme-provider/theme-provider.js');
require('../../theme-provider/theme-head.js');
var autoResizingDiv = require('../../layout/auto-resizing-div.js');
require('react-dom');
require('react-popper');
require('react-stately');
require('../../../libs/collections.js');
var textButton = require('../text-button/text-button.js');
require('../radio/radio.js');
require('../skeleton/skeleton.js');
require('../typography/typography.js');
require('../button-v2/button-v2.js');
require('ua-parser-js');
var hoverActivatedTooltip = require('../../feedback/tooltip/hover-activated-tooltip.js');
require('../../feedback/announcer.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var composeRefs__default = /*#__PURE__*/_interopDefaultLegacy(composeRefs);

const CopyableTextField = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('CopyableTextField', (props, externalRef) => {
    const inputRef = React.useRef(null);
    const [copyTooltipText, setCopyTooltipText] = React.useState('Copy');
    const { value, defaultValue, onCopy, size } = props, otherProps = _tslib.__rest(props, ["value", "defaultValue", "onCopy", "size"]);
    React.useEffect(() => {
        if (copyTooltipText !== 'Copy') {
            const timeout = setTimeout(() => setCopyTooltipText('Copy'), 1000);
            return () => clearTimeout(timeout);
        }
        return undefined;
    }, [copyTooltipText]);
    const { copy: copy$1, ref: clipboardRef } = usableReact.useClipboard(() => {
        setCopyTooltipText('Copied!');
        if (onCopy)
            onCopy();
    });
    const { pressProps } = reactAria.usePress({ onPress: copy$1 });
    const suffix = (React__default["default"].createElement(hoverActivatedTooltip.HoverActivatedTooltip, { portalize: true, placement: "top" },
        React__default["default"].createElement(hoverActivatedTooltip.HoverActivatedTooltip.Anchor, null,
            React__default["default"].createElement(textButton.TextButton, Object.assign({ size: size === 'lg' ? 'md' : size }, mergeProps.mergeProps(pressProps)),
                React__default["default"].createElement(iconBase.Icon, { type: copy.Copy, style: { lineHeight: 0 } }))),
        React__default["default"].createElement(hoverActivatedTooltip.HoverActivatedTooltip.Content, null,
            React__default["default"].createElement(autoResizingDiv.AutoResizingDiv, null,
                React__default["default"].createElement("p", { style: { textAlign: 'center' } }, copyTooltipText)))));
    return (React__default["default"].createElement(textField.TextField, Object.assign({ value: value, defaultValue: defaultValue, suffix: suffix, size: size }, otherProps, { ref: composeRefs__default["default"](inputRef, externalRef, clipboardRef) })));
});

exports.CopyableTextField = CopyableTextField;
//# sourceMappingURL=copyable-text-field.js.map
