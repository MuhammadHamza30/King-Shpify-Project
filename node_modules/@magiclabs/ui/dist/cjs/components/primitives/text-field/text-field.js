'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var composeRefs = require('@seznam/compose-react-refs');
var framerMotion = require('framer-motion');
var React = require('react');
var reactAria = require('react-aria');
var transitions = require('../../../hooks/transitions.js');
var clsx = require('clsx');
var forwardRefWrapper = require('../../../libs/forward-ref-wrapper.js');
var mergeProps = require('../../../libs/merge-props.js');
var iconBase = require('../../icons/icon-base.js');
var asteriskBold = require('../../icons/monochrome/asterisk-bold.js');
var flexbox = require('../../layout/flexbox/flexbox.js');
var outset = require('../../layout/outset/outset.js');
require('@react-aria/ssr');
require('blueimp-md5');
require('color');
require('@artsy/fresnel');
var useTheme = require('../../theme-provider/use-theme.js');
require('../../theme-provider/theme-provider.js');
require('../../theme-provider/theme-head.js');
require('usable-react');
require('watch-resize');
require('react-dom');
require('react-popper');
var textField = require('./text-field.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var composeRefs__default = /*#__PURE__*/_interopDefaultLegacy(composeRefs);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

const TextFieldRender = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('TextField', { size: 'md' }, (props, externalRef) => {
    const { id, required, disabled, label, placeholder, errorMessage, validateOnBlur, size, prefix, suffix, addonBefore, addonAfter } = props, otherProps = _tslib.__rest(props, ["id", "required", "disabled", "label", "placeholder", "errorMessage", "validateOnBlur", "size", "prefix", "suffix", "addonBefore", "addonAfter"]);
    const [hasError, setHasError] = React.useState(!!errorMessage);
    React.useEffect(() => {
        setHasError(!!errorMessage);
    }, [errorMessage]);
    const onBlur = React.useCallback((e) => {
        if (validateOnBlur) {
            const valid = e.target.checkValidity();
            setHasError(!valid || !!errorMessage);
        }
    }, [errorMessage]);
    // Focus
    const [isFocused, onFocusChange] = React.useState(false);
    const [isFocusedWithinAddonBefore, onFocusWithinAddonBeforeChange] = React.useState(false);
    const [isFocusedWithinAddonAfter, onFocusWithinAddonAfterChange] = React.useState(false);
    const { focusProps } = reactAria.useFocus({ isDisabled: disabled, onBlur, onFocusChange });
    const { focusWithinProps: focusWithinAddonBeforeProps } = reactAria.useFocusWithin({
        isDisabled: disabled,
        onFocusWithinChange: onFocusWithinAddonBeforeChange,
    });
    const { focusWithinProps: focusWithinAddonAfterProps } = reactAria.useFocusWithin({
        isDisabled: disabled,
        onFocusWithinChange: onFocusWithinAddonAfterChange,
    });
    const { isFocusVisible } = reactAria.useFocusVisible({ isTextInput: true });
    const inputRef = React.useRef(null);
    const focusOnInput = React.useCallback(() => {
        if (inputRef.current)
            inputRef.current.focus();
    }, [inputRef]);
    const getScaleProps = transitions.transitions.useScale();
    const theme = useTheme.useTheme();
    return (React__default["default"].createElement(flexbox.Flex.Column, null,
        label && (React__default["default"].createElement(outset.Outset, { bottom: 8 },
            React__default["default"].createElement("label", { htmlFor: id, className: clsx__default["default"]([textField["default"].TextFieldLabel, textField["default"][`size_${size}`]]) },
                React__default["default"].createElement(flexbox.Flex.Row, { alignItems: "center" },
                    React__default["default"].createElement(outset.Outset, { right: 3, trim: "horizontal" },
                        React__default["default"].createElement("span", null, label),
                        required && React__default["default"].createElement(iconBase.Icon, { size: 10, color: theme.hex.error.darker, type: asteriskBold.AsteriskBold })))))),
        React__default["default"].createElement(flexbox.Flex.Row, { alignItems: "center", onClick: focusOnInput, className: clsx__default["default"]([
                textField["default"].TextField,
                disabled && textField["default"].disabled,
                isFocused && textField["default"].focus,
                (isFocusedWithinAddonBefore || isFocusedWithinAddonAfter) && isFocusVisible && textField["default"].focusWithin,
                isFocusedWithinAddonBefore && isFocusVisible && textField["default"].focusWithinAddonBefore,
                isFocusedWithinAddonAfter && isFocusVisible && textField["default"].focusWithinAddonAfter,
                hasError && textField["default"].hasError,
            ]) },
            addonBefore && (React__default["default"].createElement(flexbox.Flex.Item, Object.assign({}, focusWithinAddonBeforeProps, { shrink: 0, alignSelf: "stretch", className: clsx__default["default"](textField["default"].addon, textField["default"].before) }), addonBefore)),
            React__default["default"].createElement(flexbox.Flex.Row, { grow: 1, alignItems: "center", className: clsx__default["default"](textField["default"].paddingContainer, textField["default"][`size_${size}`]) },
                React__default["default"].createElement(framerMotion.AnimatePresence, { initial: false, mode: "wait" }, prefix && (React__default["default"].createElement(framerMotion.motion.div, Object.assign({ className: textField["default"].prefix }, getScaleProps(0.7), { key: 0 }), prefix))),
                React__default["default"].createElement("input", Object.assign({}, mergeProps.mergeProps({
                    id,
                    tabIndex: disabled ? -1 : 0,
                    disabled,
                    'aria-label': !label && !!placeholder ? placeholder : undefined,
                    placeholder,
                }, focusProps, otherProps), { ref: composeRefs__default["default"](inputRef, externalRef) })),
                React__default["default"].createElement(framerMotion.AnimatePresence, { initial: false, mode: "wait" }, suffix && !hasError && (React__default["default"].createElement(framerMotion.motion.div, Object.assign({ className: textField["default"].suffix }, getScaleProps(0.7), { key: 0 }), suffix)))),
            addonAfter && (React__default["default"].createElement(flexbox.Flex.Item, Object.assign({}, focusWithinAddonAfterProps, { shrink: 0, alignSelf: "stretch", className: clsx__default["default"](textField["default"].addon, textField["default"].after) }), addonAfter))),
        errorMessage && (React__default["default"].createElement(outset.Outset, { top: 8, left: 0 },
            React__default["default"].createElement("span", { className: clsx__default["default"]([textField["default"].TextFieldErrorMessage, textField["default"][`size_${size}`]]) }, errorMessage)))));
});
const TextFieldAddonButton = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('TextField.AddonButton', (props, externalRef) => {
    const { disabled, autoFocus, children } = props, otherProps = _tslib.__rest(props, ["disabled", "autoFocus", "children"]);
    const { isFocusVisible, focusProps } = reactAria.useFocusRing({ autoFocus });
    return (React__default["default"].createElement(flexbox.Flex.Row, { vertical: "center", horizontal: "center", className: textField["default"].AddonButton },
        React__default["default"].createElement("button", Object.assign({}, mergeProps.mergeProps({
            className: clsx__default["default"](disabled && textField["default"].disabled, isFocusVisible && textField["default"].focus),
            disabled,
            autoFocus,
        }, focusProps, otherProps), { ref: externalRef }), children)));
});
const TextField = /* @__PURE__ */ Object.assign(TextFieldRender, {
    AddonButton: TextFieldAddonButton,
});

exports.TextField = TextField;
//# sourceMappingURL=text-field.js.map
