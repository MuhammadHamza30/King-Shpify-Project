{"version":3,"file":"use-tabs.js","sources":["../../../../../src/components/layout/tabs/use-tabs.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useDomEvent, useIsMounted } from 'usable-react';\nimport { MonochromeIconDefinition } from '../../icons';\nimport { Tab } from './tab/tab';\nimport { TabList } from './tab-list/tab-list';\nimport { TabPanel } from './tab-panel';\nimport { useSSR } from '../../ssr-provider';\n\ninterface TabConfig {\n  id: React.Key;\n  label: JSX.Element | React.ReactText;\n  content: JSX.Element;\n  icon?: MonochromeIconDefinition;\n}\n\ninterface UseTabsConfig {\n  id?: React.Key;\n  label: string;\n  size?: 'sm' | 'md' | 'lg';\n  orientation?: 'horizontal' | 'vertical';\n  tabs: TabConfig[];\n}\n\nfunction formatTabID(tablistID: React.Key = 0, key: React.Key) {\n  return `mg-useTabs-tabID__${tablistID}-${key}`;\n}\n\nfunction formatPanelID(tablistID: React.Key = 0, key: React.Key) {\n  return `mg-useTabs-panelID__${tablistID}-${key}`;\n}\n\nexport function useTabs(config: UseTabsConfig) {\n  const { id: tablistID, label: tablistLabel, size = 'md', orientation = 'horizontal', tabs } = config;\n\n  const isMounted = useIsMounted();\n\n  const tabIDs = tabs.map(({ id }) => formatTabID(tablistID, id));\n  const panelIDs = tabs.map(({ id }) => formatPanelID(tablistID, id));\n  const [useAnimation, setUseAnimation] = useState(false);\n  const [activeTabID, setActiveTabID] = useState<string | undefined>(tabIDs[0]);\n  const [indicatorAttributes, setIndicatorAttributes] = useState<\n    React.ComponentProps<typeof TabList>['indicatorAttributes']\n  >({\n    width: 0,\n    height: 0,\n    offsetLeft: 0,\n    offsetTop: 0,\n  });\n\n  // We save a `tabsRef` using the `tabsRefCallback` to get a current list of\n  // React refs for each rendered tab button.\n  const tabRefs = useRef<{ [key: string]: HTMLButtonElement | null }>({});\n  const tabRefsCallback = useCallback((node: HTMLButtonElement | null) => {\n    if (node) tabRefs.current[node.id] = node;\n  }, []);\n\n  /**\n   * Updates the saved `width` and `offsetLeft` attributes to re-position the\n   * selected tab indicator.\n   */\n  const updateAttributes = useCallback((tabID: string) => {\n    const ref = tabRefs.current[tabID];\n\n    if (ref && isMounted()) {\n      setIndicatorAttributes({\n        width: ref.getBoundingClientRect().width,\n        height: ref.getBoundingClientRect().height,\n        offsetLeft: ref.offsetLeft,\n        offsetTop: ref.offsetTop,\n      });\n    }\n  }, []);\n\n  /**\n   * Sets the active tab ID and updates the selected tab indicator attributes.\n   */\n  const activateTab = useCallback(\n    (tabID: string) => {\n      if (isMounted()) {\n        setActiveTabID(tabID);\n        updateAttributes(tabID);\n        setUseAnimation(true);\n      }\n    },\n\n    [updateAttributes],\n  );\n\n  // Set the initial selected tab indicator attributes.\n  useEffect(() => {\n    updateAttributes(activeTabID!);\n  }, []);\n\n  if (useSSR().isClient) {\n    // If the `window` resizes, we update the selected tab indicator attributes.\n    const addEvent = useDomEvent(window);\n    addEvent('resize', () => {\n      updateAttributes(activeTabID!);\n      setUseAnimation(true);\n    });\n  }\n\n  const tablist = (\n    <TabList\n      orientation={orientation}\n      label={tablistLabel}\n      indicatorAttributes={indicatorAttributes}\n      useAnimation={useAnimation}\n    >\n      {tabs.map(({ id, label, icon }, i) => {\n        const isSelected = activeTabID === tabIDs[i];\n        return (\n          <Tab\n            id={tabIDs[i]}\n            panelID={panelIDs[i]}\n            allTabIDs={tabIDs}\n            index={i}\n            activateTab={activateTab}\n            selected={isSelected}\n            orientation={orientation}\n            size={size}\n            useAnimation={useAnimation}\n            ref={tabRefsCallback}\n            icon={icon}\n            key={id}\n          >\n            {label}\n          </Tab>\n        );\n      })}\n    </TabList>\n  );\n\n  const tabpanel = tabs.map(({ id, content }, i) => {\n    return (\n      <TabPanel id={panelIDs[i]} tabID={tabIDs[i]} selected={activeTabID === tabIDs[i]} key={id}>\n        {content}\n      </TabPanel>\n    );\n  });\n\n  return { tablist, tabpanel };\n}\n"],"names":["useIsMounted","useState","useRef","useCallback","useEffect","useSSR","useDomEvent","React","TabList","Tab","TabPanel"],"mappings":"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"}