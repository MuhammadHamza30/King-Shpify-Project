'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');
var clsx = require('clsx');
var useStyles = require('../../../hooks/use-styles.js');
var forwardRefWrapper = require('../../../libs/forward-ref-wrapper.js');
var flexbox = require('./flexbox.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

/* eslint-disable no-nested-ternary */
const FlexLayout = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('FlexLayout', (props, externalRef) => {
    const { inline, justifyContent, alignItems, alignSelf, alignContent, flex: flexStyle, direction: flexDirection, wrap: flexWrap, grow: flexGrow, shrink: flexShrink, basis: flexBasis, style } = props, otherProps = _tslib.__rest(props, ["inline", "justifyContent", "alignItems", "alignSelf", "alignContent", "flex", "direction", "wrap", "grow", "shrink", "basis", "style"]);
    const containerStyles = useStyles.useStyles(Object.assign({ justifyContent: justifyContent !== null && justifyContent !== void 0 ? justifyContent : undefined, alignItems: alignItems !== null && alignItems !== void 0 ? alignItems : undefined, alignSelf: alignSelf !== null && alignSelf !== void 0 ? alignSelf : undefined, alignContent: alignContent !== null && alignContent !== void 0 ? alignContent : undefined, flexStyle: flexStyle !== null && flexStyle !== void 0 ? flexStyle : undefined, flexDirection: flexDirection !== null && flexDirection !== void 0 ? flexDirection : undefined, flexWrap: typeof flexWrap === 'boolean' ? (flexWrap ? 'wrap' : 'nowrap') : flexWrap ? `wrap-${flexWrap}` : undefined, flexGrow: flexGrow !== null && flexGrow !== void 0 ? flexGrow : undefined, flexShrink: flexShrink !== null && flexShrink !== void 0 ? flexShrink : undefined, flexBasis: flexBasis !== null && flexBasis !== void 0 ? flexBasis : undefined }, style));
    return React__default["default"].createElement("div", Object.assign({}, otherProps, { style: containerStyles, ref: externalRef }));
});
const FlexItem = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Flex.Item', (props, externalRef) => {
    const { className, inline } = props, otherProps = _tslib.__rest(props, ["className", "inline"]);
    return (React__default["default"].createElement(FlexLayout, Object.assign({ className: clsx__default["default"]([flexbox["default"].FlexItem, className, inline && flexbox["default"].inlineItem]) }, otherProps, { ref: externalRef })));
});
// -------------------------------------------------------------------------- //
const FlexContainer = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Flex', (props, externalRef) => {
    const { className, inline } = props, otherProps = _tslib.__rest(props, ["className", "inline"]);
    return (React__default["default"].createElement(FlexLayout, Object.assign({ className: clsx__default["default"]([flexbox["default"].FlexContainer, flexbox["default"].FlexItem, className, inline && flexbox["default"].inlineContainer]) }, otherProps, { ref: externalRef })));
});
const FlexRow = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Flex.Row', (props, externalRef) => {
    const { reverse, horizontal, vertical } = props, otherProps = _tslib.__rest(props, ["reverse", "horizontal", "vertical"]);
    const direction = reverse ? 'row-reverse' : 'row';
    return (React__default["default"].createElement(FlexContainer, Object.assign({ direction: direction, justifyContent: horizontal, alignItems: vertical }, otherProps, { ref: externalRef })));
});
const FlexColumn = /* @__PURE__ */ forwardRefWrapper.forwardRefWrapper('Flex.Column', (props, externalRef) => {
    const { reverse, horizontal, vertical } = props, otherProps = _tslib.__rest(props, ["reverse", "horizontal", "vertical"]);
    const direction = reverse ? 'column-reverse' : 'column';
    return (React__default["default"].createElement(FlexContainer, Object.assign({ direction: direction, justifyContent: vertical, alignItems: horizontal }, otherProps, { ref: externalRef })));
});
// -------------------------------------------------------------------------- //
const Flex = /* @__PURE__ */ Object.assign(FlexContainer, {
    Item: FlexItem,
    Row: FlexRow,
    Column: FlexColumn,
});

exports.Flex = Flex;
//# sourceMappingURL=flexbox.js.map
