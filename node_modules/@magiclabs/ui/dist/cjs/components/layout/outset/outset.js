'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var useStyles = require('../../../hooks/use-styles.js');
var clsx = require('clsx');
var mergeProps = require('../../../libs/merge-props.js');
var outset = require('./outset.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

function resolveStyleValue(source) {
    return typeof source === 'number' ? `${source}px` : source;
}
const Outset = (props) => {
    const { wrapItemsWith, top, right, bottom, left, all, trim, children } = props;
    const style = useStyles.useStyles(all
        ? {
            margin: resolveStyleValue(all),
        }
        : {
            marginTop: resolveStyleValue(top),
            marginRight: resolveStyleValue(right),
            marginBottom: resolveStyleValue(bottom),
            marginLeft: resolveStyleValue(left),
        });
    const numChildren = React__default["default"].Children.count(children);
    const wrappedChildren = React__default["default"].Children.map(children, (child, i) => {
        const isFirstChild = i === 0;
        const isLastChild = i === numChildren - 1;
        const className = clsx__default["default"]([
            outset["default"].Outset,
            isFirstChild && outset["default"].isFirstChild,
            isLastChild && outset["default"].isLastChild,
            trim === 'horizontal' && outset["default"].trimHorizontally,
            trim === 'vertical' && outset["default"].trimVertically,
        ]);
        if (wrapItemsWith) {
            return React__default["default"].createElement(wrapItemsWith, { className, style }, child);
        }
        if (React__default["default"].isValidElement(child)) {
            return React__default["default"].cloneElement(child, mergeProps.mergeProps(child.props, { className, style }));
        }
        return child;
    });
    return React__default["default"].createElement(React__default["default"].Fragment, null, wrappedChildren);
};

exports.Outset = Outset;
//# sourceMappingURL=outset.js.map
