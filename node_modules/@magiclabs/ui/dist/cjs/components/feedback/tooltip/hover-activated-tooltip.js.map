{"version":3,"file":"hover-activated-tooltip.js","sources":["../../../../../src/components/feedback/tooltip/hover-activated-tooltip.tsx"],"sourcesContent":["import { Placement, PositioningStrategy } from '@popperjs/core';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useFocusVisible, useFocusWithin, useHover } from 'react-aria';\nimport { useClickOutside } from 'usable-react';\nimport { createErrorWithCode } from '../../../libs/exceptions';\nimport { forwardRefWrapper } from '../../../libs/forward-ref-wrapper';\nimport { mergeProps } from '../../../libs/merge-props';\nimport { IntrinsicElementProps } from '../../../types/utility';\nimport { useSSR } from '../../ssr-provider';\nimport { Tooltip } from './tooltip';\n\ninterface HoverActivatedTooltipProps extends IntrinsicElementProps<'div'> {\n  arrow?: boolean;\n  offset?: [number, number];\n  placement?: Placement;\n  strategy?: PositioningStrategy;\n  portalize?: boolean;\n  appearance?: 'default' | 'none';\n  stretch?: boolean;\n}\n\nconst HoverActivatedTooltipBase = /* @__PURE__ */ forwardRefWrapper<HTMLDivElement, HoverActivatedTooltipProps>(\n  'HoverActivatedTooltip',\n\n  (props, externalRef) => {\n    const { children, ...otherProps } = props;\n\n    const [focusWithin, setFocusWithinState] = useState(false);\n    const [hover, setHoverState] = useState(false);\n    const [showTooltip, setShowTooltip] = useState(false);\n\n    const anchorRef = useRef<HTMLDivElement | null>(null);\n    const contentRef = useRef<HTMLDivElement | null>(null);\n\n    const { isServer } = useSSR();\n\n    if (!isServer) {\n      useClickOutside([contentRef.current, anchorRef.current], () => setShowTooltip(false), []);\n    }\n\n    const { isFocusVisible } = useFocusVisible();\n\n    const { focusWithinProps } = useFocusWithin({\n      onFocusWithinChange: useCallback(\n        (isFocused: boolean) => {\n          // In some edge cases, such as when `useClipboard` is in use, document\n          // focus may be \"stolen away\" momentarily. For this case, if keyboard\n          // focus is still visible (via `isFocusVisible`), but the active\n          // element is `document.body`, then we ignore the blur event and\n          // persist the focused tooltip state.\n          const isDocumentBodyActive = document.activeElement !== document.body;\n\n          setFocusWithinState(isFocusVisible && (isFocused || isDocumentBodyActive));\n        },\n        [isFocusVisible],\n      ),\n    });\n\n    const { hoverProps } = useHover({\n      onHoverChange: useCallback((isHovered: boolean) => setHoverState(isHovered), []),\n    });\n\n    const anchorEvents = useMemo(() => {\n      return {\n        onMouseEnter: () => setShowTooltip(true),\n        onTouchStart: () => setShowTooltip(true),\n        onMouseLeave: () => setShowTooltip(false),\n        onTouchEnd: () => setShowTooltip(false),\n      };\n    }, [showTooltip]);\n\n    useEffect(() => {\n      setShowTooltip(focusWithin || hover);\n    }, [focusWithin, hover]);\n\n    const anchor = React.Children.map(children, (child) => {\n      if (React.isValidElement(child) && child.type === HoverActivatedTooltipAnchor) {\n        return child;\n      }\n\n      return null;\n    })?.filter(Boolean);\n\n    const content = React.Children.map(children, (child) => {\n      if (React.isValidElement(child) && child.type === HoverActivatedTooltipContent) {\n        return child;\n      }\n\n      return null;\n    })?.filter(Boolean);\n\n    // Validate that only one <HoverActivatedTooltip.Anchor> is received.\n    const numAnchors = React.Children.count(anchor);\n    if (numAnchors > 1) {\n      throw createErrorWithCode(\n        'HOVER_ACTIVATED_TOOLTIP_ONLY_ONE_ANCHOR_ALLOWED',\n        HoverActivatedTooltipBase,\n        `Only one <HoverActivatedTooltip.Anchor> element can be rendered in a <HoverActivatedTooltip> at a time. Received: ${numAnchors}`,\n      );\n    }\n\n    // Validate that only one <HoverActivatedTooltip.Content> is received.\n    const numContents = React.Children.count(content);\n    if (numContents > 1) {\n      throw createErrorWithCode(\n        'HOVER_ACTIVATED_TOOLTIP_ONLY_ONE_CONTENT_ALLOWED',\n        HoverActivatedTooltipBase,\n        `Only one <HoverActivatedTooltip.Content> element can be rendered in a <HoverActivatedTooltip> at a time. Received: ${numContents}`,\n      );\n    }\n\n    if (React.Children.count(children) > numAnchors + numContents) {\n      // Validate that only <HoverActivatedTooltip.Content> and <HoverActivatedTooltip.Anchor> components are received as children.\n      throw createErrorWithCode(\n        'TOOLTIP_INCOMPATIBLE_CHILDREN_DETECTED',\n        HoverActivatedTooltipBase,\n        'Only children wrapped with <HoverActivatedTooltip.Anchor> or <HoverActivatedTooltip.Content> are allowed within a <HoverActivatedTooltip>.',\n      );\n    }\n\n    return (\n      <Tooltip in={showTooltip} delay={0} {...otherProps} ref={externalRef}>\n        <Tooltip.Anchor {...mergeProps(anchorEvents, focusWithinProps, hoverProps)} ref={anchorRef}>\n          {anchor}\n        </Tooltip.Anchor>\n        <Tooltip.Content ref={contentRef}>{content}</Tooltip.Content>\n      </Tooltip>\n    );\n  },\n);\n\nconst HoverActivatedTooltipAnchor = /* @__PURE__ */ forwardRefWrapper<HTMLDivElement, IntrinsicElementProps<'div'>>(\n  'HoverActivatedTooltip.Anchor',\n  (props, externalRef) => <div {...props} ref={externalRef} />,\n);\n\nconst HoverActivatedTooltipContent = /* @__PURE__ */ forwardRefWrapper<HTMLDivElement, IntrinsicElementProps<'div'>>(\n  'HoverActivatedTooltip.Content',\n  (props, externalRef) => <div {...props} ref={externalRef} />,\n);\n\nexport const HoverActivatedTooltip = /* @__PURE__ */ Object.assign(HoverActivatedTooltipBase, {\n  Anchor: HoverActivatedTooltipAnchor,\n  Content: HoverActivatedTooltipContent,\n});\n"],"names":["forwardRefWrapper","__rest","useState","useRef","useSSR","useClickOutside","useFocusVisible","useFocusWithin","useCallback","useHover","useMemo","useEffect","React","createErrorWithCode","Tooltip","mergeProps"],"mappings":"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"}