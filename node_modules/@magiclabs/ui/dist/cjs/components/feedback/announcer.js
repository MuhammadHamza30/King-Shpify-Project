'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var reactAria = require('react-aria');
var usableReact = require('usable-react');
var exceptions = require('../../libs/exceptions.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

let msgKey = 0;
const msgLimit = 25; // Keep # of most recent messages rendered in the DOM.
const AnnouncerContext = /* @__PURE__ */ React.createContext(() => {
    throw exceptions.createErrorWithCode('ANNOUNCER_PROVIDER_REQUIRED', 'useAnnouncer', `Before the result of \`useAnnouncer\` can be utilized, you must wrap your application with \`<ThemeProvider>\`.`);
});
const Announcer = (props) => {
    const { children } = props;
    const politeMessages = React.useRef([]);
    const assertiveMessages = React.useRef([]);
    const forceUpdate = usableReact.useForceUpdate();
    const announce = React.useCallback((message, options) => {
        switch (options === null || options === void 0 ? void 0 : options.type) {
            case 'assertive': {
                assertiveMessages.current = [
                    ...assertiveMessages.current.slice(Math.max(assertiveMessages.current.length - msgLimit, 0)),
                    React__default["default"].createElement("div", { key: ++msgKey }, message),
                ];
                break;
            }
            case 'polite':
            default: {
                politeMessages.current = [
                    ...politeMessages.current.slice(Math.max(politeMessages.current.length - msgLimit, 0)),
                    React__default["default"].createElement("div", { key: ++msgKey }, message),
                ];
                break;
            }
        }
        forceUpdate();
    }, []);
    return (React__default["default"].createElement(AnnouncerContext.Provider, { value: announce },
        React__default["default"].createElement(MessageBlock, { type: "polite" }, politeMessages.current),
        React__default["default"].createElement(MessageBlock, { type: "assertive" }, assertiveMessages.current),
        children));
};
Announcer.displayName = 'Announcer';
const MessageBlock = (props) => {
    const { children, type = 'polite', relevant = 'additions' } = props;
    return (React__default["default"].createElement(reactAria.VisuallyHidden, null,
        React__default["default"].createElement("div", { role: "log", "aria-live": type, "aria-relevant": relevant }, children)));
};
MessageBlock.displayName = 'MessageBlock';
function useAnnouncer() {
    return React.useContext(AnnouncerContext);
}

exports.Announcer = Announcer;
exports.useAnnouncer = useAnnouncer;
//# sourceMappingURL=announcer.js.map
