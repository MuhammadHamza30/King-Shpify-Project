'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var framerMotion = require('framer-motion');
var React = require('react');
var usableReact = require('usable-react');
var transitions = require('../../../../hooks/transitions.js');
var clsx = require('clsx');
var iconBase = require('../../../icons/icon-base.js');
var exclaim = require('../../../icons/monochrome/exclaim.js');
var info = require('../../../icons/monochrome/info.js');
var successFilled = require('../../../icons/monochrome/success-filled.js');
var warning = require('../../../icons/monochrome/warning.js');
var flexbox = require('../../../layout/flexbox/flexbox.js');
require('@react-aria/ssr');
require('react-aria');
var inset = require('../../../layout/inset/inset.js');
require('@seznam/compose-react-refs');
require('blueimp-md5');
require('color');
require('@artsy/fresnel');
var useTheme = require('../../../theme-provider/use-theme.js');
var themeProvider = require('../../../theme-provider/theme-provider.js');
require('../../../theme-provider/theme-head.js');
require('watch-resize');
var ephemeralPortal = require('../../../layout/ephemeral-portal.js');
require('react-popper');
var useToast = require('../use-toast.js');
var toastProvider = require('./toast-provider.less.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var clsx__default = /*#__PURE__*/_interopDefaultLegacy(clsx);

let toastID = 0;
const toastIcons = {
    success: () => successFilled.SuccessFilled,
    warning: () => warning.Warning,
    error: () => exclaim.Exclaim,
    info: () => info.Info,
};
const ToastProvider = (props) => {
    const { position, children } = props;
    const isMounted = usableReact.useIsMounted();
    const theme = useTheme.useTheme();
    const toastsRef = React.useRef([]);
    const forceUpdate = React.useReducer((x) => x + 1, 0)[1];
    const removeToast = React.useCallback((id) => {
        toastsRef.current = toastsRef.current.filter((toast) => toast.id !== id);
        forceUpdate();
    }, []);
    const createToast = React.useCallback((options) => {
        const { message, messageOnly, type = 'info', lifespan = 2000 } = options;
        const id = ++toastID;
        toastsRef.current.push({ message, messageOnly, type, id });
        forceUpdate();
        setTimeout(() => {
            if (isMounted()) {
                removeToast(id);
            }
        }, lifespan);
        return id;
    }, []);
    const toastCtx = React.useMemo(() => ({ createToast, removeToast }), [createToast, removeToast]);
    const getSlideProps = transitions.transitions.useSlide();
    const toasts = (position === null || position === void 0 ? void 0 : position.startsWith('top')) ? [...toastsRef.current] : [...toastsRef.current].reverse();
    const activeToasts = toasts.map((toast) => {
        return (React__default["default"].createElement(framerMotion.motion.div, Object.assign({ layout: true, className: clsx__default["default"]([toastProvider["default"].toast, toastProvider["default"][toast.type]]), "data-mg-toast-id": toast.id, key: toast.id, "aria-live": ['info', 'success', 'warning'].includes(toast.type) ? 'polite' : 'assertive' }, getSlideProps({ x: 0, y: (position === null || position === void 0 ? void 0 : position.startsWith('top')) ? -10 : 10 })),
            React__default["default"].createElement(flexbox.Flex.Row, { vertical: "flex-start" },
                !toast.messageOnly && (React__default["default"].createElement(inset.Inset, { top: 2 },
                    React__default["default"].createElement(iconBase.Icon, { inline: false, size: 20, type: toastIcons[toast.type]() }))),
                React__default["default"].createElement(flexbox.Flex.Item, { shrink: 0, grow: 1, className: toastProvider["default"].message }, toast.message))));
    });
    return (React__default["default"].createElement(useToast.ToastContext.Provider, { value: toastCtx },
        children,
        React__default["default"].createElement(ephemeralPortal.EphemeralPortal, null,
            React__default["default"].createElement(themeProvider.ThemeProvider, { theme: theme },
                React__default["default"].createElement(inset.Inset, { all: 40 },
                    React__default["default"].createElement("div", { className: toastProvider["default"].ToastNotifications },
                        React__default["default"].createElement("div", { className: clsx__default["default"]([toastProvider["default"].toastContainer, toastProvider["default"][`position_${position}`]]) },
                            React__default["default"].createElement(framerMotion.AnimatePresence, null, activeToasts))))))));
};

exports.ToastProvider = ToastProvider;
//# sourceMappingURL=toast-provider.js.map
