import { DependencyList, EffectCallback } from 'react';
export interface TimerHook {
    /**
     * Starts the timer.
     */
    start: () => void;
    /**
     * Pauses the timer. This function has no effect if the timer has not yet
     * started.
     */
    pause: () => void;
    /**
     * Resumes the timer. This function has no effect if the timer has not yet
     * started.
     */
    resume: () => void;
    /**
     * Resets the timer.
     *
     * @param newLength - Optionally provide a new timer length (in milliseconds).
     * @param newTick - Optionally provide a new tick length (in milliseconds).
     */
    reset: (newLength?: number, newTick?: number) => void;
    /**
     * A function returning the amount of time (in milliseconds) remaining in the
     * timer.
     */
    getRemaining: () => number;
    /**
     * A function returning the total expected length of the timer (in
     * milliseconds).
     */
    getLength: () => number;
    /**
     * A function returning `true` or `false` indicating whether the timer is
     * currently running.
     */
    isRunning: () => boolean;
    /**
     * References a static value that updates whenever the timer state changes.
     * You can give this value to the dependency list `React.useEffect` to trigger
     * an effect.
     */
    key: number;
}
/**
 * Returns a timer that works inside the React lifecycle.
 *
 * @param length - The total length of the timer (in milliseconds).
 * @param tick - The interval at which to update the timer (in milliseconds).
 */
export declare function useTimer(options: {
    length: number;
    tick?: number;
    autoStart?: boolean;
}): TimerHook;
/**
 * Execute an effect if the supplied timer ticks.
 *
 * @param timer - The `TimerHook` object to base effects from.
 * @param effect - Imperative function that can return a cleanup function.
 * @param deps - If present, effect will only activate if the values in the list change.
 */
export declare function useTimerEffect(timer: TimerHook, effect: EffectCallback, deps?: DependencyList): void;
/**
 * Execute an effect if the supplied timer completes.
 *
 * @param timer - The `TimerHook` object to base effects from.
 * @param effect - Imperative function that can return a cleanup function.
 * @param deps - If present, effect will only activate if the values in the list change.
 */
export declare function useTimerComplete(timer: TimerHook, effect: EffectCallback, deps?: DependencyList): void;
