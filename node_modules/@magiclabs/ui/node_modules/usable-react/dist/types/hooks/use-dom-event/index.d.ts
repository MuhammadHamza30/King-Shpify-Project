import { MutableRefObject, RefObject } from 'react';
interface AddEventListenerFunction<T extends HTMLElement | Window | Document, EventMap extends HTMLElementEventMap | WindowEventMap | DocumentEventMap> {
    <K extends keyof EventMap>(eventName: K, listener: (this: T, event: EventMap[K]) => any, deps?: React.DependencyList, options?: boolean | AddEventListenerOptions | undefined): UseDomEventRemoveListenerFunction;
    <K extends keyof EventMap>(eventName: K, listener: (this: T, event: EventMap[K]) => any, options?: boolean | AddEventListenerOptions | undefined, deps?: React.DependencyList): UseDomEventRemoveListenerFunction;
    <K extends keyof EventMap>(eventName: K, listener: (this: T, event: EventMap[K]) => any, depsOrOptions?: React.DependencyList | boolean | AddEventListenerOptions | undefined, optionsOrDeps?: React.DependencyList | boolean | AddEventListenerOptions | undefined): UseDomEventRemoveListenerFunction;
}
export declare type UseDomEventRemoveListenerFunction = () => void;
export declare type UseDomEventAddListenerFunction<T extends HTMLElement | Window | Document> = T extends HTMLElement ? AddEventListenerFunction<T, HTMLElementEventMap> : T extends Window ? AddEventListenerFunction<T, WindowEventMap> : T extends Document ? AddEventListenerFunction<T, DocumentEventMap> : never;
/**
 * Creates a React hook that registers DOM event listeners on the given
 * `element`. The effect returns a `void` function that can be used to remove
 * the event listener manually. Event listeners created this way are
 * automatically cleaned up before the component unmounts.
 */
export declare function useDomEvent<T extends HTMLElement | Window | Document | null>(element: T | MutableRefObject<T> | RefObject<T>): UseDomEventAddListenerFunction<NonNullable<T>>;
export {};
