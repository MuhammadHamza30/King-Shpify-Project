/// <reference types="react" />
/**
 * As a fallback when `navigator.clipboard` is unavailable, we create an
 * ephemeral <textarea> to perform the copy operation. In some cases, we want to
 * identify this <textarea> so that we can act accordingly to focus changes
 * (while copying, the <textarea> momentarily steals focus).
 *
 * The validation check performed by this function is naive, returning `true` if
 * a known dataset value is attached to the given `element`.
 */
declare function isEphemeralCopyToClipboardTextarea(element: any): element is HTMLTextAreaElement;
interface CopyFn {
    (source?: string): void;
    (source?: Event): void;
    (source?: any): void;
}
interface OnCopyHandler {
    (value: string): void;
}
/**
 * Creates a memoized callback—`copy`—that interacts with the user's computer clipboard.
 * Also provides a `ref` to attach to inputs, which can then be used as a source
 * for the clipboard value.
 */
declare function useClipboardImpl(onCopy?: OnCopyHandler): {
    copy: CopyFn;
    ref: import("react").MutableRefObject<HTMLInputElement | null>;
};
export declare const useClipboard: typeof useClipboardImpl & {
    isEphemeralCopyToClipboardTextarea: typeof isEphemeralCopyToClipboardTextarea;
};
export {};
