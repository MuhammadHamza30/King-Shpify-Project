import { createHash as createHash$1 } from 'crypto';

/* eslint-disable no-underscore-dangle */
/** Check if the given function is a native function */
function isNativeFunction(f) {
    if (typeof f !== 'function')
        return false;
    var exp = /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i;
    return exp.exec(Function.prototype.toString.call(f)) != null;
}
function createHash(object) {
    var hashingStream = createHash$1('md5');
    var dispatch = typeHasher(hashingStream).dispatch;
    dispatch(object);
    if (!hashingStream.update)
        hashingStream.end('');
    if (hashingStream.digest)
        return hashingStream.digest('hex');
    var buf = hashingStream.read();
    return buf.toString('hex');
}
function typeHasher(writeTo) {
    var context = [];
    var write = function (str) {
        if (writeTo.update)
            writeTo.update(str, 'utf8');
        writeTo.write(str, 'utf8');
    };
    var dispatch = function (value) {
        var type = value === null ? 'null' : typeof value;
        typeHandlers["_" + type](value);
    };
    var typeHandlers = {
        _object: function (object) {
            var pattern = /\[object (.*)\]/i;
            var objString = Object.prototype.toString.call(object);
            var execArr = pattern.exec(objString);
            var objType = execArr ? execArr[1].toLowerCase() : ("unknown:[" + objString + "]").toLowerCase();
            var objectNumber = context.indexOf(object);
            if (objectNumber >= 0)
                dispatch("[CIRCULAR:" + objectNumber + "]");
            context.push(object);
            if (typeof Buffer !== 'undefined' && Buffer.isBuffer && Buffer.isBuffer(object)) {
                write('buffer:');
                write(object.toString('hex'));
            }
            if (objType !== 'object' && objType !== 'function' && objType !== 'asyncfunction') {
                if (typeHandlers["_" + objType]) {
                    typeHandlers["_" + objType](object);
                }
                else {
                    write("[" + objType + "]");
                }
            }
            else {
                var keys = Object.keys(object)
                    .sort()
                    .splice(0, 0, 'prototype', '__proto__', 'constructor');
                write("object:" + keys.length + ":");
                keys.forEach(function (key) {
                    dispatch(key);
                    write(':');
                    write(',');
                });
            }
        },
        _array: function (arr) {
            write("array:" + arr.length + ":");
            arr.forEach(dispatch);
        },
        _date: function (date) {
            write("date:" + date.toJSON());
        },
        _symbol: function (sym) {
            write("symbol:" + sym.toString());
        },
        _error: function (err) {
            write("error:" + err.toString());
        },
        _boolean: function (bool) {
            write("bool:" + bool.toString());
        },
        _string: function (string) {
            write("string:" + string.length + ":");
            write(string.toString());
        },
        _function: function (fn) {
            write('fn:');
            if (isNativeFunction(fn))
                dispatch('[native]');
            else
                dispatch(fn.toString());
            dispatch("function-name:" + String(fn.name));
            this._object(fn);
        },
        _number: function (number) {
            write("number:" + number.toString());
        },
        _xml: function (xml) {
            write("xml:" + xml.toString());
        },
        _null: function () {
            write('Null');
        },
        _undefined: function () {
            write('Undefined');
        },
        _regexp: function (regex) {
            write("regex:" + regex.toString());
        },
        _uint8array: function (arr) {
            write('uint8array:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _uint8clampedarray: function (arr) {
            write('uint8clampedarray:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _int8array: function (arr) {
            write('uint8array:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _uint16array: function (arr) {
            write('uint16array:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _int16array: function (arr) {
            write('uint16array:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _uint32array: function (arr) {
            write('uint32array:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _int32array: function (arr) {
            write('uint32array:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _float32array: function (arr) {
            write('float32array:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _float64array: function (arr) {
            write('float64array:');
            dispatch(Array.prototype.slice.call(arr));
        },
        _arraybuffer: function (arr) {
            write('arraybuffer:');
            dispatch(new Uint8Array(arr));
        },
        _url: function (url) {
            write("url:" + url.toString());
        },
        _map: function (map) {
            write('map:');
            var arr = Array.from(map);
            typeHandlers._array(arr);
        },
        _set: function (set) {
            write('set:');
            var arr = Array.from(set);
            typeHandlers._array(arr);
        },
        _blob: function () {
            write('[blob]');
        },
        _domwindow: function () {
            write('domwindow');
        },
    };
    return { dispatch: dispatch };
}

export { createHash };
//# sourceMappingURL=create-hash.js.map
