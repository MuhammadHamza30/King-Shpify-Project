import { __read, __assign } from '../../_virtual/_tslib.js';
import Fuse from 'fuse.js';
import { useState } from 'react';
import { useHash } from '../use-hash/index.js';
import { useDebouncedEffect } from '../use-debounced-effect/index.js';

/**
 * Peform a fuzzy search on a dataset (`haystack`), returning the results that
 * match most closely to the given `needle`.
 */
function useFilter(_a) {
    var _b = _a === void 0 ? {} : _a, needle = _b.needle, haystack = _b.haystack, debounce = _b.debounce, searchOptions = _b.searchOptions;
    var _c = __read(useState([]), 2), results = _c[0], setResults = _c[1];
    var options = __assign({ keys: [] }, searchOptions);
    var haystackHash = useHash(haystack);
    var optionsHash = useHash(options);
    // Execute a search if the needle/haystack changes.
    useDebouncedEffect(function () {
        if (needle) {
            var fuse = new Fuse(haystack || [], options);
            if (needle)
                setResults(fuse.search(needle).map(function (i) { return i.item; }));
        }
    }, debounce, [needle, haystackHash, optionsHash]);
    return results;
}

export { useFilter };
//# sourceMappingURL=index.js.map
