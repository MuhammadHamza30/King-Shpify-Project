{"version":3,"file":"index.js","sources":["../../../../src/hooks/use-hash/index.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { createHash } from './create-hash';\n\n/**\n * Returns a hash of the given `value`. This is useful for comparing objects\n * deeply. For example, if the contents of an array are referenced inside a\n * `useEffect`, you can pass the hashed array to the effect dependencies to\n * invoke it when the array updates.\n */\nexport function useHash<T>(value: T) {\n  const [hash, setHash] = useState<string>(createHash(typeof value === 'undefined' ? null : ''));\n  useEffect(() => {\n    if (value) setHash(createHash(value));\n  }, [value]);\n  return hash;\n}\n"],"names":[],"mappings":";;;;AAGA;;;;;;SAMgB,OAAO,CAAI,KAAQ;IAC3B,IAAA,KAAA,OAAkB,QAAQ,CAAS,UAAU,CAAC,OAAO,KAAK,KAAK,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,IAAA,EAAvF,IAAI,QAAA,EAAE,OAAO,QAA0E,CAAC;IAC/F,SAAS,CAAC;QACR,IAAI,KAAK;YAAE,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;KACvC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACZ,OAAO,IAAI,CAAC;AACd;;;;"}