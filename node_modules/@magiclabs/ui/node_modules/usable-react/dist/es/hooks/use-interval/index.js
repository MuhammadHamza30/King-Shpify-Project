import { __spread } from '../../_virtual/_tslib.js';
import { useRef, useEffect, useCallback } from 'react';
import { useEffectTrigger } from '../use-effect-trigger/index.js';
import { useInitialRender } from '../use-initial-render/index.js';

/**
 * Executes the given effect on an interval.
 */
function useInterval(effect, deps, interval) {
    if (interval === void 0) { interval = 1000; }
    var savedCallback = useRef(effect);
    var isInitialRender = useInitialRender();
    var isCleared = useRef(false);
    // Remember the latest callback.
    useEffect(function () {
        savedCallback.current = effect;
    }, [effect]);
    // Set up the interval.
    var triggerInterval = useEffectTrigger(function () {
        if (!isInitialRender && !isCleared.current)
            return savedCallback.current();
        return undefined;
    }, __spread(deps));
    useEffect(function () {
        var id = setTimeout(function () {
            triggerInterval();
        }, interval);
        return function () { return clearTimeout(id); };
    }, [triggerInterval, interval]);
    var clear = useCallback(function () {
        isCleared.current = true;
    }, []);
    return clear;
}

export { useInterval };
//# sourceMappingURL=index.js.map
