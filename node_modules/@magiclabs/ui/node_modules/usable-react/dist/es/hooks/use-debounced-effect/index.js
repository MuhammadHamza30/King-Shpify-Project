import { __spread } from '../../_virtual/_tslib.js';
import { useEffect } from 'react';
import { useEffectTrigger } from '../use-effect-trigger/index.js';
import { useInitialRender } from '../use-initial-render/index.js';

/**
 * Debounces an effect. If `delay` is zero,
 * the effect is executed synchronously.
 *
 * The effect executes synchronously on the first render.
 */
function useDebouncedEffect(effect, delay, deps) {
    if (delay === void 0) { delay = 0; }
    if (deps === void 0) { deps = []; }
    var isInitialRender = useInitialRender();
    var triggerEffect = useEffectTrigger(effect, deps);
    useEffect(function () {
        if (isInitialRender || !delay) {
            return effect();
        }
        var timeout = setTimeout(function () {
            triggerEffect();
        }, delay);
        return function () {
            clearTimeout(timeout);
        };
    }, __spread([delay], deps));
}

export { useDebouncedEffect };
//# sourceMappingURL=index.js.map
