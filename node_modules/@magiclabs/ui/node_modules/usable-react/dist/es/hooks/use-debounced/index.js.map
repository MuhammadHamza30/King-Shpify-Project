{"version":3,"file":"index.js","sources":["../../../../src/hooks/use-debounced/index.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/**\n * Debounces the given value. If `delay` is zero, the value is updated\n * synchronously.\n */\nexport function useDebounced<T>(value: T, delay = 300) {\n  const isSynchronous = delay === 0;\n  const [debouncedValue, setDebouncedValue] = useState<T>((undefined as unknown) as T);\n\n  useEffect(() => {\n    const id = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => clearTimeout(id);\n  }, [delay, isSynchronous, value]);\n\n  return isSynchronous ? value : debouncedValue;\n}\n"],"names":[],"mappings":";;;AAEA;;;;SAIgB,YAAY,CAAI,KAAQ,EAAE,KAAW;IAAX,sBAAA,EAAA,WAAW;IACnD,IAAM,aAAa,GAAG,KAAK,KAAK,CAAC,CAAC;IAC5B,IAAA,KAAA,OAAsC,QAAQ,CAAK,SAA0B,CAAC,IAAA,EAA7E,cAAc,QAAA,EAAE,iBAAiB,QAA4C,CAAC;IAErF,SAAS,CAAC;QACR,IAAM,EAAE,GAAG,UAAU,CAAC;YACpB,iBAAiB,CAAC,KAAK,CAAC,CAAC;SAC1B,EAAE,KAAK,CAAC,CAAC;QAEV,OAAO,cAAM,OAAA,YAAY,CAAC,EAAE,CAAC,GAAA,CAAC;KAC/B,EAAE,CAAC,KAAK,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;IAElC,OAAO,aAAa,GAAG,KAAK,GAAG,cAAc,CAAC;AAChD;;;;"}