import { __read, __spread } from '../../_virtual/_tslib.js';
import { useRef, useEffect, useCallback } from 'react';
import { isWindow, isDocument, isElement, isRefObject } from '../../utils/instance-of.js';

/* eslint-disable no-shadow */
/**
 * Creates a React hook that registers DOM event listeners on the given
 * `element`. The effect returns a `void` function that can be used to remove
 * the event listener manually. Event listeners created this way are
 * automatically cleaned up before the component unmounts.
 */
function useDomEvent(element) {
    return (function () {
        var eventListenerParams = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            eventListenerParams[_i] = arguments[_i];
        }
        var _a = __read(eventListenerParams, 4), eventName = _a[0], listener = _a[1], depsOrOptions = _a[2], optionsOrDeps = _a[3];
        var deps = (Array.isArray(depsOrOptions) ? depsOrOptions : optionsOrDeps) || [];
        var options = Array.isArray(depsOrOptions)
            ? optionsOrDeps
            : depsOrOptions;
        var savedListener = useRef(listener);
        var savedOptions = useRef(options);
        var removeListenerRef = useRef(function () { });
        useEffect(function () {
            savedListener.current = listener;
        }, [listener]);
        useEffect(function () {
            savedOptions.current = options;
        }, [options]);
        useEffect(function () {
            // Bail out early if `element` is null.
            if (!element)
                return undefined;
            // Handle events from an `element` given as a valid node.
            if (isWindow(element) || isDocument(element) || isElement(element)) {
                var listener_1 = function (e) { return savedListener.current(e); };
                element.addEventListener(eventName, listener_1, savedOptions.current);
                removeListenerRef.current = function () {
                    element.removeEventListener(eventName, listener_1, savedOptions.current);
                };
                return removeListenerRef.current;
            }
            // Handle events from an `element` given as a React ref.
            if (isRefObject(element)) {
                if (!!element.current && isElement(element.current)) {
                    var listener_2 = function (e) { return savedListener.current(e); };
                    element.current.addEventListener(eventName, listener_2, savedOptions.current);
                    removeListenerRef.current = function () {
                        element.current.removeEventListener(eventName, listener_2, savedOptions.current);
                    };
                    return removeListenerRef.current;
                }
            }
            return undefined;
        }, __spread([eventName, element], deps));
        return useCallback(function () { return removeListenerRef.current(); }, []);
    });
}

export { useDomEvent };
//# sourceMappingURL=index.js.map
