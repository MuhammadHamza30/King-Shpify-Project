import { __read } from '../../_virtual/_tslib.js';
import React, { useState, useEffect } from 'react';
import { useInitialRender } from '../use-initial-render/index.js';

/**
 * Checks if old children and new children are different based on React keys.
 *
 * @source https://github.com/reactjs/react-transition-group/blob/master/src/SwitchTransition.js#L6
 */
function areReactChildrenDifferent(oldChildren, newChildren) {
    if (oldChildren === newChildren)
        return false;
    if (React.isValidElement(oldChildren) &&
        React.isValidElement(newChildren) &&
        oldChildren.key != null &&
        oldChildren.key === newChildren.key) {
        return false;
    }
    return true;
}
/**
 * Get a copy of the given `children`, deferred to the next update.
 */
function useDeferredChildren(children) {
    var _a = __read(useState(children), 2), nextChildren = _a[0], setNextChildren = _a[1];
    var isInitialRender = useInitialRender();
    useEffect(function () {
        if (!isInitialRender && areReactChildrenDifferent(nextChildren, children)) {
            setNextChildren(children);
        }
    }, [nextChildren, children]);
    return nextChildren;
}

export { useDeferredChildren };
//# sourceMappingURL=index.js.map
