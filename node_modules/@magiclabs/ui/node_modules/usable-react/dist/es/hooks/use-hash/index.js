import { __read } from '../../_virtual/_tslib.js';
import { useState, useEffect } from 'react';
import { createHash } from './create-hash.js';

/**
 * Returns a hash of the given `value`. This is useful for comparing objects
 * deeply. For example, if the contents of an array are referenced inside a
 * `useEffect`, you can pass the hashed array to the effect dependencies to
 * invoke it when the array updates.
 */
function useHash(value) {
    var _a = __read(useState(createHash(typeof value === 'undefined' ? null : '')), 2), hash = _a[0], setHash = _a[1];
    useEffect(function () {
        if (value)
            setHash(createHash(value));
    }, [value]);
    return hash;
}

export { useHash };
//# sourceMappingURL=index.js.map
