{"version":3,"file":"index.js","sources":["../../../../src/hooks/use-dom-event/index.ts"],"sourcesContent":["/* eslint-disable no-shadow */\n\nimport { MutableRefObject, RefObject, useCallback, useEffect, useRef } from 'react';\nimport { isDocument, isElement, isRefObject, isWindow } from '../../utils/instance-of';\n\ninterface AddEventListenerFunction<\n  T extends HTMLElement | Window | Document,\n  EventMap extends HTMLElementEventMap | WindowEventMap | DocumentEventMap\n> {\n  <K extends keyof EventMap>(\n    eventName: K,\n    listener: (this: T, event: EventMap[K]) => any,\n    deps?: React.DependencyList,\n    options?: boolean | AddEventListenerOptions | undefined,\n  ): UseDomEventRemoveListenerFunction;\n\n  <K extends keyof EventMap>(\n    eventName: K,\n    listener: (this: T, event: EventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions | undefined,\n    deps?: React.DependencyList,\n  ): UseDomEventRemoveListenerFunction;\n\n  <K extends keyof EventMap>(\n    eventName: K,\n    listener: (this: T, event: EventMap[K]) => any,\n    depsOrOptions?: React.DependencyList | boolean | AddEventListenerOptions | undefined,\n    optionsOrDeps?: React.DependencyList | boolean | AddEventListenerOptions | undefined,\n  ): UseDomEventRemoveListenerFunction;\n}\n\nexport type UseDomEventRemoveListenerFunction = () => void;\nexport type UseDomEventAddListenerFunction<T extends HTMLElement | Window | Document> = T extends HTMLElement\n  ? AddEventListenerFunction<T, HTMLElementEventMap>\n  : T extends Window\n  ? AddEventListenerFunction<T, WindowEventMap>\n  : T extends Document\n  ? AddEventListenerFunction<T, DocumentEventMap>\n  : never;\n\n/**\n * Creates a React hook that registers DOM event listeners on the given\n * `element`. The effect returns a `void` function that can be used to remove\n * the event listener manually. Event listeners created this way are\n * automatically cleaned up before the component unmounts.\n */\nexport function useDomEvent<T extends HTMLElement | Window | Document | null>(\n  element: T | MutableRefObject<T> | RefObject<T>,\n) {\n  return ((...eventListenerParams: any[]) => {\n    const [eventName, listener, depsOrOptions, optionsOrDeps] = eventListenerParams;\n\n    const deps: React.DependencyList = (Array.isArray(depsOrOptions) ? depsOrOptions : optionsOrDeps) || [];\n    const options: boolean | AddEventListenerOptions | undefined = Array.isArray(depsOrOptions)\n      ? optionsOrDeps\n      : depsOrOptions;\n\n    const savedListener = useRef(listener);\n    const savedOptions = useRef(options);\n    const removeListenerRef = useRef(() => {});\n\n    useEffect(() => {\n      savedListener.current = listener;\n    }, [listener]);\n\n    useEffect(() => {\n      savedOptions.current = options;\n    }, [options]);\n\n    useEffect(() => {\n      // Bail out early if `element` is null.\n      if (!element) return undefined;\n\n      // Handle events from an `element` given as a valid node.\n      if (isWindow(element) || isDocument(element) || isElement(element)) {\n        const listener = (e: any) => savedListener.current(e);\n        element.addEventListener(eventName, listener, savedOptions.current);\n        removeListenerRef.current = () => {\n          element.removeEventListener(eventName, listener, savedOptions.current);\n        };\n        return removeListenerRef.current;\n      }\n\n      // Handle events from an `element` given as a React ref.\n      if (isRefObject<T>(element)) {\n        if (!!element.current && isElement(element.current)) {\n          const listener = (e: any) => savedListener.current(e);\n          element.current.addEventListener(eventName, listener, savedOptions.current);\n          removeListenerRef.current = () => {\n            element.current!.removeEventListener(eventName, listener, savedOptions.current);\n          };\n          return removeListenerRef.current;\n        }\n      }\n\n      return undefined;\n    }, [eventName, element, ...deps]);\n\n    return useCallback(() => removeListenerRef.current(), []);\n  }) as UseDomEventAddListenerFunction<NonNullable<T>>;\n}\n"],"names":["__read","useRef","useEffect","isWindow","isDocument","isElement","isRefObject","useCallback"],"mappings":";;;;;;;;AAAA;AAwCA;;;;;;SAMgB,WAAW,CACzB,OAA+C;IAE/C,QAAQ;QAAC,6BAA6B;aAA7B,UAA6B,EAA7B,qBAA6B,EAA7B,IAA6B;YAA7B,wCAA6B;;QAC9B,IAAA,KAAAA,cAAsD,mBAAmB,IAAA,EAAxE,SAAS,QAAA,EAAE,QAAQ,QAAA,EAAE,aAAa,QAAA,EAAE,aAAa,QAAuB,CAAC;QAEhF,IAAM,IAAI,GAAyB,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,aAAa,GAAG,aAAa,KAAK,EAAE,CAAC;QACxG,IAAM,OAAO,GAAkD,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;cACvF,aAAa;cACb,aAAa,CAAC;QAElB,IAAM,aAAa,GAAGC,YAAM,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAM,YAAY,GAAGA,YAAM,CAAC,OAAO,CAAC,CAAC;QACrC,IAAM,iBAAiB,GAAGA,YAAM,CAAC,eAAQ,CAAC,CAAC;QAE3CC,eAAS,CAAC;YACR,aAAa,CAAC,OAAO,GAAG,QAAQ,CAAC;SAClC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEfA,eAAS,CAAC;YACR,YAAY,CAAC,OAAO,GAAG,OAAO,CAAC;SAChC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;QAEdA,eAAS,CAAC;;YAER,IAAI,CAAC,OAAO;gBAAE,OAAO,SAAS,CAAC;;YAG/B,IAAIC,mBAAQ,CAAC,OAAO,CAAC,IAAIC,qBAAU,CAAC,OAAO,CAAC,IAAIC,oBAAS,CAAC,OAAO,CAAC,EAAE;gBAClE,IAAM,UAAQ,GAAG,UAAC,CAAM,IAAK,OAAA,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,GAAA,CAAC;gBACtD,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;gBACpE,iBAAiB,CAAC,OAAO,GAAG;oBAC1B,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;iBACxE,CAAC;gBACF,OAAO,iBAAiB,CAAC,OAAO,CAAC;aAClC;;YAGD,IAAIC,sBAAW,CAAI,OAAO,CAAC,EAAE;gBAC3B,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,IAAID,oBAAS,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;oBACnD,IAAM,UAAQ,GAAG,UAAC,CAAM,IAAK,OAAA,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,GAAA,CAAC;oBACtD,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,UAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;oBAC5E,iBAAiB,CAAC,OAAO,GAAG;wBAC1B,OAAO,CAAC,OAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,UAAQ,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;qBACjF,CAAC;oBACF,OAAO,iBAAiB,CAAC,OAAO,CAAC;iBAClC;aACF;YAED,OAAO,SAAS,CAAC;SAClB,mBAAG,SAAS,EAAE,OAAO,GAAK,IAAI,EAAE,CAAC;QAElC,OAAOE,iBAAW,CAAC,cAAM,OAAA,iBAAiB,CAAC,OAAO,EAAE,GAAA,EAAE,EAAE,CAAC,CAAC;KAC3D,EAAoD;AACvD;;;;"}