{"version":3,"file":"index.js","sources":["../../../../src/hooks/use-effect-trigger/index.ts"],"sourcesContent":["import { DependencyList, EffectCallback, useEffect, useReducer, useRef } from 'react';\nimport { useCompare } from '../use-compare';\n\n/**\n * Exactly like `useEffect`, except that it returns a memoized function to\n * trigger the effect in question. The effect only executes when the trigger\n * updates regardless of the given `deps`.\n *\n * A few use-cases for this hook include:\n *\n * 1. Deferring an effect to the next render tick.\n * 2. Sequencing asynchronous effects.\n * 3. Executing an effect after marshalling arbitrary state/data required for\n *    the effect to proceed.\n */\nexport function useEffectTrigger(effect: EffectCallback, deps: DependencyList = []) {\n  const [i, trigger] = useReducer((x: number) => x + 1, 0);\n  const didTriggerUpdate = useCompare(i);\n  const savedCallback = useRef(effect);\n\n  useEffect(() => {\n    savedCallback.current = effect;\n  }, [effect]);\n\n  useEffect(() => {\n    if (didTriggerUpdate) {\n      return savedCallback.current();\n    }\n\n    return undefined;\n  }, [i, ...deps]);\n\n  return trigger as () => void;\n}\n"],"names":["__read","useReducer","useCompare","useRef","useEffect"],"mappings":";;;;;;;;AAGA;;;;;;;;;;;;SAYgB,gBAAgB,CAAC,MAAsB,EAAE,IAAyB;IAAzB,qBAAA,EAAA,SAAyB;IAC1E,IAAA,KAAAA,cAAeC,gBAAU,CAAC,UAAC,CAAS,IAAK,OAAA,CAAC,GAAG,CAAC,GAAA,EAAE,CAAC,CAAC,IAAA,EAAjD,CAAC,QAAA,EAAE,OAAO,QAAuC,CAAC;IACzD,IAAM,gBAAgB,GAAGC,gBAAU,CAAC,CAAC,CAAC,CAAC;IACvC,IAAM,aAAa,GAAGC,YAAM,CAAC,MAAM,CAAC,CAAC;IAErCC,eAAS,CAAC;QACR,aAAa,CAAC,OAAO,GAAG,MAAM,CAAC;KAChC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEbA,eAAS,CAAC;QACR,IAAI,gBAAgB,EAAE;YACpB,OAAO,aAAa,CAAC,OAAO,EAAE,CAAC;SAChC;QAED,OAAO,SAAS,CAAC;KAClB,mBAAG,CAAC,GAAK,IAAI,EAAE,CAAC;IAEjB,OAAO,OAAqB,CAAC;AAC/B;;;;"}