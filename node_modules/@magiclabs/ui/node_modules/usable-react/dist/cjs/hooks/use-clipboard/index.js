'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.js');
var React = require('react');
var canUseDom = require('../../utils/can-use-dom.js');

/* eslint-disable @typescript-eslint/prefer-regexp-exec */
var clipboardID = 0;
var textareaIdentifierKey = 'usableReactClipboardHook';
/**
 * Copies text to the native clipboard, either via the `navigator.clipboard`
 * API, or old `document.execCommand('copy')` hacks!
 *
 * Based on this excellent StackOverflow answer:
 * https://stackoverflow.com/a/45308151
 */
function copyToClipboard(text) {
    var _a, _b, _c, _d, _e;
    return _tslib.__awaiter(this, void 0, void 0, function () {
        var activeEl, textarea, selected, editable, range, selection;
        return _tslib.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _g.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, navigator.clipboard.writeText(text)];
                case 1:
                    _g.sent();
                    return [3 /*break*/, 3];
                case 2:
                    _g.sent();
                    activeEl = document.activeElement;
                    textarea = document.createElement('textarea');
                    // Make sure we can detect this element
                    textarea.dataset[textareaIdentifierKey] = "clipboard-" + ++clipboardID;
                    // Move it off-screen.
                    textarea.style.position = 'absolute';
                    textarea.style.left = '-2147483647em';
                    // Set to readonly to prevent mobile devices opening a keyboard when
                    // text is .select()'ed.
                    textarea.setAttribute('readonly', true);
                    document.body.appendChild(textarea);
                    textarea.value = text;
                    selected = ((_b = (_a = document.getSelection()) === null || _a === void 0 ? void 0 : _a.rangeCount) !== null && _b !== void 0 ? _b : NaN) > 0 ? (_c = document.getSelection()) === null || _c === void 0 ? void 0 : _c.getRangeAt(0) : false;
                    // iOS Safari blocks programmatic execCommand copying normally, without this hack.
                    // https://stackoverflow.com/questions/34045777/copy-to-clipboard-using-javascript-in-ios
                    if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {
                        editable = textarea.contentEditable;
                        textarea.contentEditable = true;
                        range = document.createRange();
                        range.selectNodeContents(textarea);
                        selection = window.getSelection();
                        selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
                        selection === null || selection === void 0 ? void 0 : selection.addRange(range);
                        textarea.setSelectionRange(0, 999999);
                        textarea.contentEditable = editable;
                    }
                    else {
                        textarea.select();
                    }
                    document.execCommand('copy');
                    // Restore previous selection
                    if (selected) {
                        (_d = document.getSelection()) === null || _d === void 0 ? void 0 : _d.removeAllRanges();
                        (_e = document.getSelection()) === null || _e === void 0 ? void 0 : _e.addRange(selected);
                    }
                    // Restore previous focus
                    if (activeEl && activeEl.focus && isEphemeralCopyToClipboardTextarea(document.activeElement)) {
                        activeEl.focus();
                    }
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
/**
 * As a fallback when `navigator.clipboard` is unavailable, we create an
 * ephemeral <textarea> to perform the copy operation. In some cases, we want to
 * identify this <textarea> so that we can act accordingly to focus changes
 * (while copying, the <textarea> momentarily steals focus).
 *
 * The validation check performed by this function is naive, returning `true` if
 * a known dataset value is attached to the given `element`.
 */
function isEphemeralCopyToClipboardTextarea(element) {
    var _a;
    return !!((_a = element.dataset) === null || _a === void 0 ? void 0 : _a[textareaIdentifierKey]);
}
/**
 * Creates a memoized callback—`copy`—that interacts with the user's computer clipboard.
 * Also provides a `ref` to attach to inputs, which can then be used as a source
 * for the clipboard value.
 */
function useClipboardImpl(onCopy) {
    var _this = this;
    var ref = React.useRef(null);
    var copy = React.useCallback(function (source) { return _tslib.__awaiter(_this, void 0, void 0, function () {
        var text;
        var _a, _b, _c, _d, _e, _f;
        return _tslib.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    if (!canUseDom.CAN_USE_DOM)
                        return [2 /*return*/];
                    text = typeof source === 'string'
                        ? String(source)
                        : (_f = (_d = (_b = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : (_c = ref.current) === null || _c === void 0 ? void 0 : _c.textContent) !== null && _d !== void 0 ? _d : (_e = source === null || source === void 0 ? void 0 : source.target) === null || _e === void 0 ? void 0 : _e.value) !== null && _f !== void 0 ? _f : '';
                    return [4 /*yield*/, copyToClipboard(text)];
                case 1:
                    _g.sent();
                    if (onCopy)
                        onCopy(text);
                    return [2 /*return*/];
            }
        });
    }); }, [onCopy]);
    return { copy: copy, ref: ref };
}
var useClipboard = /* @__PURE__ */ Object.assign(useClipboardImpl, { isEphemeralCopyToClipboardTextarea: isEphemeralCopyToClipboardTextarea });

exports.useClipboard = useClipboard;
//# sourceMappingURL=index.js.map
