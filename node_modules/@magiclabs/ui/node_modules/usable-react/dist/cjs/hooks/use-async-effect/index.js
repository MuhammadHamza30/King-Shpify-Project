'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var index = require('../use-is-mounted/index.js');

/**
 * Makes asynchronous work inside the React lifecycle easy with automatic guards
 * against updating internal component state if the component is unmounted
 * before the async work is finished.
 */
function useAsyncEffect(handler, deps) {
    var thenCallback = React.useRef();
    var registerThenCb = React.useCallback(function (onfulfilled) {
        thenCallback.current = onfulfilled;
        return chain;
    }, []);
    var catchCallback = React.useRef();
    var registerCatchCb = React.useCallback(function (onrejected) {
        catchCallback.current = onrejected;
        return chain;
    }, []);
    var finallyCallback = React.useRef();
    var registerFinallyCb = React.useCallback(function (onsettled) {
        finallyCallback.current = onsettled;
        return chain;
    }, []);
    var cleanupCallback = React.useRef();
    var registerCleanupCb = React.useCallback(function (oncleanup) {
        cleanupCallback.current = oncleanup;
        return chain;
    }, []);
    var chain = React.useMemo(function () {
        return {
            fullfilled: registerThenCb,
            rejected: registerCatchCb,
            settled: registerFinallyCb,
            cleanup: registerCleanupCb,
        };
    }, []);
    var isMounted = index.useIsMounted();
    React.useEffect(function () {
        var context = {};
        handler(context)
            .then(function (value) {
            if (isMounted() && thenCallback.current)
                thenCallback.current(value, context);
        })
            .catch(function (err) {
            if (isMounted() && catchCallback.current)
                catchCallback.current(err, context);
        })
            .finally(function () {
            if (isMounted() && finallyCallback.current)
                finallyCallback.current(context);
        });
        if (cleanupCallback.current)
            return function () { return cleanupCallback.current(context); };
        return undefined;
    }, deps);
    return chain;
}

exports.useAsyncEffect = useAsyncEffect;
//# sourceMappingURL=index.js.map
