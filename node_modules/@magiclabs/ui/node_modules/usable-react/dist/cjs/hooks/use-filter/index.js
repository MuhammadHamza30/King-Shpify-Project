'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.js');
var Fuse = require('fuse.js');
var React = require('react');
var index = require('../use-hash/index.js');
var index$1 = require('../use-debounced-effect/index.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Fuse__default = /*#__PURE__*/_interopDefaultLegacy(Fuse);

/**
 * Peform a fuzzy search on a dataset (`haystack`), returning the results that
 * match most closely to the given `needle`.
 */
function useFilter(_a) {
    var _b = _a === void 0 ? {} : _a, needle = _b.needle, haystack = _b.haystack, debounce = _b.debounce, searchOptions = _b.searchOptions;
    var _c = _tslib.__read(React.useState([]), 2), results = _c[0], setResults = _c[1];
    var options = _tslib.__assign({ keys: [] }, searchOptions);
    var haystackHash = index.useHash(haystack);
    var optionsHash = index.useHash(options);
    // Execute a search if the needle/haystack changes.
    index$1.useDebouncedEffect(function () {
        if (needle) {
            var fuse = new Fuse__default['default'](haystack || [], options);
            if (needle)
                setResults(fuse.search(needle).map(function (i) { return i.item; }));
        }
    }, debounce, [needle, haystackHash, optionsHash]);
    return results;
}

exports.useFilter = useFilter;
//# sourceMappingURL=index.js.map
