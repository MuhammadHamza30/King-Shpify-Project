@import (reference) './variables.less';

#mg() {
  // These values should be kept exactly in-sync
  // with those defined in "../constants.ts"
  .breakpoints() {
    xs: 0px;
    sm: 640px;
    md: 768px;
    lg: 1024px;
    xl: 1280px;
    xxl: 1536px;
  }

  .query() {
    .maxWidth(@max, @rules) {
      @media only screen and (max-width: @max) { & { @rules(); } }
    }

    .minWidth(@min, @rules) {
      @media only screen and (min-width: @min) { & { @rules(); } }
    }

    .between(@min, @max, @rules) {
      @media only screen and (min-width: @min) and (max-width: @max) { & { @rules(); } }
    }
  }

  .screen() {
    .at() {
      .xs(@rules) { #mg.query.between(#mg.breakpoints()[xs], #mg.breakpoints()[sm], @rules); }
      .sm(@rules) { #mg.query.between(#mg.breakpoints()[sm], #mg.breakpoints()[md], @rules); }
      .md(@rules) { #mg.query.between(#mg.breakpoints()[md], #mg.breakpoints()[lg], @rules); }
      .lg(@rules) { #mg.query.between(#mg.breakpoints()[lg], #mg.breakpoints()[xl], @rules); }
      .xl(@rules) { #mg.query.between(#mg.breakpoints()[xl], #mg.breakpoints()[xxl], @rules); }
      .xxl(@rules) { #mg.query.minWidth(#mg.breakpoints()[xxl], @rules); }
    }

    .lessThan() {
      .sm(@rules) { #mg.query.maxWidth(#mg.breakpoints()[sm], @rules); }
      .md(@rules) { #mg.query.maxWidth(#mg.breakpoints()[md], @rules); }
      .lg(@rules) { #mg.query.maxWidth(#mg.breakpoints()[lg], @rules); }
      .xl(@rules) { #mg.query.maxWidth(#mg.breakpoints()[xl], @rules); }
      .xxl(@rules) { #mg.query.maxWidth(#mg.breakpoints()[xxl], @rules); }
    }

    .greaterThan() {
      .xs(@rules) { #mg.query.minWidth(#mg.breakpoints()[sm], @rules); }
      .sm(@rules) { #mg.query.minWidth(#mg.breakpoints()[md], @rules); }
      .md(@rules) { #mg.query.minWidth(#mg.breakpoints()[lg], @rules); }
      .lg(@rules) { #mg.query.minWidth(#mg.breakpoints()[xl], @rules); }
      .xl(@rules) { #mg.query.minWidth(#mg.breakpoints()[xxl], @rules); }
    }

    .greaterThanOrEqual() {
      .xs(@rules) { #mg.query.minWidth(#mg.breakpoints()[xs], @rules); }
      .sm(@rules) { #mg.query.minWidth(#mg.breakpoints()[sm], @rules); }
      .md(@rules) { #mg.query.minWidth(#mg.breakpoints()[md], @rules); }
      .lg(@rules) { #mg.query.minWidth(#mg.breakpoints()[lg], @rules); }
      .xl(@rules) { #mg.query.minWidth(#mg.breakpoints()[xl], @rules); }
      .xxl(@rules) { #mg.query.minWidth(#mg.breakpoints()[xxl], @rules); }
    }

    .between() {
      .xs() {
        .sm(@rules) { #mg.query.between(#mg.breakpoints()[xs], #mg.breakpoints()[sm], @rules); }
        .md(@rules) { #mg.query.between(#mg.breakpoints()[xs], #mg.breakpoints()[md], @rules); }
        .lg(@rules) { #mg.query.between(#mg.breakpoints()[xs], #mg.breakpoints()[lg], @rules); }
        .xl(@rules) { #mg.query.between(#mg.breakpoints()[xs], #mg.breakpoints()[xl], @rules); }
        .xxl(@rules) { #mg.query.between(#mg.breakpoints()[xs], #mg.breakpoints()[xxl], @rules); }
      }

      .sm() {
        .md(@rules) { #mg.query.between(#mg.breakpoints()[sm], #mg.breakpoints()[md], @rules); }
        .lg(@rules) { #mg.query.between(#mg.breakpoints()[sm], #mg.breakpoints()[lg], @rules); }
        .xl(@rules) { #mg.query.between(#mg.breakpoints()[sm], #mg.breakpoints()[xl], @rules); }
        .xxl(@rules) { #mg.query.between(#mg.breakpoints()[sm], #mg.breakpoints()[xxl], @rules); }
      }

      .md() {
        .lg(@rules) { #mg.query.between(#mg.breakpoints()[md], #mg.breakpoints()[lg], @rules); }
        .xl(@rules) { #mg.query.between(#mg.breakpoints()[md], #mg.breakpoints()[xl], @rules); }
        .xxl(@rules) { #mg.query.between(#mg.breakpoints()[md], #mg.breakpoints()[xxl], @rules); }
      }

      .lg() {
        .xl(@rules) { #mg.query.between(#mg.breakpoints()[lg], #mg.breakpoints()[xl], @rules); }
        .xxl(@rules) { #mg.query.between(#mg.breakpoints()[lg], #mg.breakpoints()[xxl], @rules); }
      }

      .xl() {
        .xxl(@rules) { #mg.query.between(#mg.breakpoints()[xl], #mg.breakpoints()[xxl], @rules); }
      }
    }
  }
}

